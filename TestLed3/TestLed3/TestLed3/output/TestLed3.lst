FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 02 B5 LJMP  _LED7SEG_1_ISR     (0149)     ljmp	_LED7SEG_1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 0C    MOV   A,0xC              (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 9F LCALL 0x029F             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 02 0C MOV   [__r0],0xC         (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 02 0C CMP   [__r0],0xC         (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 02    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 50    MOV   X,0x50             (0368)     mov  X,<__idata_start
00AC: 55 02 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 02 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 02    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 03 EC LCALL __UserModules_end|__text_start|_main|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0150: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_testled3
                                        (0019) AREA psoc_config(rom, rel)
                                        (0020) LoadConfigTBL_testled3:
                                        (0021) 	M8C_SetBank0
                                        (0022) ;  Global Register values Bank 0
0152: 62 60 28 MOV   REG[0x60],0x28     (0023) 	mov	reg[60h], 28h		; AnalogColumnInputSelect register (AMX_IN)
0155: 62 66 00 MOV   REG[0x66],0x0      (0024) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
0158: 62 63 05 MOV   REG[0x63],0x5      (0025) 	mov	reg[63h], 05h		; AnalogReferenceControl register (ARF_CR)
015B: 62 65 00 MOV   REG[0x65],0x0      (0026) 	mov	reg[65h], 00h		; AnalogSyncControl register (ASY_CR)
015E: 62 E6 00 MOV   REG[0xE6],0x0      (0027) 	mov	reg[e6h], 00h		; DecimatorControl_0 register (DEC_CR0)
0161: 62 E7 00 MOV   REG[0xE7],0x0      (0028) 	mov	reg[e7h], 00h		; DecimatorControl_1 register (DEC_CR1)
0164: 62 D6 00 MOV   REG[0xD6],0x0      (0029) 	mov	reg[d6h], 00h		; I2CConfig register (I2CCFG)
0167: 62 B0 00 MOV   REG[0xB0],0x0      (0030) 	mov	reg[b0h], 00h		; Row_0_InputMux register (RDI0RI)
016A: 62 B1 00 MOV   REG[0xB1],0x0      (0031) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
016D: 62 B2 00 MOV   REG[0xB2],0x0      (0032) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
0170: 62 B3 33 MOV   REG[0xB3],0x33     (0033) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
0173: 62 B4 33 MOV   REG[0xB4],0x33     (0034) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
0176: 62 B5 00 MOV   REG[0xB5],0x0      (0035) 	mov	reg[b5h], 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
0179: 62 B6 00 MOV   REG[0xB6],0x0      (0036) 	mov	reg[b6h], 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
017C: 62 B8 55 MOV   REG[0xB8],0x55     (0037) 	mov	reg[b8h], 55h		; Row_1_InputMux register (RDI1RI)
017F: 62 B9 00 MOV   REG[0xB9],0x0      (0038) 	mov	reg[b9h], 00h		; Row_1_InputSync register (RDI1SYN)
0182: 62 BA 10 MOV   REG[0xBA],0x10     (0039) 	mov	reg[bah], 10h		; Row_1_LogicInputAMux register (RDI1IS)
0185: 62 BB 33 MOV   REG[0xBB],0x33     (0040) 	mov	reg[bbh], 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
0188: 62 BC 33 MOV   REG[0xBC],0x33     (0041) 	mov	reg[bch], 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
018B: 62 BD 00 MOV   REG[0xBD],0x0      (0042) 	mov	reg[bdh], 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
018E: 62 BE 00 MOV   REG[0xBE],0x0      (0043) 	mov	reg[beh], 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0044) ;  Instance name LCD_1, User Module LCD
                                        (0045) ;  Instance name LED7SEG_1, User Module LED7SEG
                                        (0046) ;       Instance name LED7SEG_1, Block Name MPXTMR(DBB00)
0191: 62 23 04 MOV   REG[0x23],0x4      (0047) 	mov	reg[23h], 04h		;LED7SEG_1_CONTROL_REG(DBB00CR0)
0194: 62 21 0F MOV   REG[0x21],0xF      (0048) 	mov	reg[21h], 0fh		;LED7SEG_1_(DBB00DR1)
0197: 62 22 07 MOV   REG[0x22],0x7      (0049) 	mov	reg[22h], 07h		;LED7SEG_1_(DBB00DR2)
019A: 71 10    OR    F,0x10             
                                        (0050) ;  Instance name LED_BL, User Module LED
                                        (0051) 	M8C_SetBank1
                                        (0052) ;  Global Register values Bank 1
019C: 62 61 00 MOV   REG[0x61],0x0      (0053) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
019F: 62 69 00 MOV   REG[0x69],0x0      (0054) 	mov	reg[69h], 00h		; AnalogClockSelect2 register (CLK_CR2)
01A2: 62 60 00 MOV   REG[0x60],0x0      (0055) 	mov	reg[60h], 00h		; AnalogColumnClockSelect register (CLK_CR0)
01A5: 62 62 00 MOV   REG[0x62],0x0      (0056) 	mov	reg[62h], 00h		; AnalogIOControl_0 register (ABF_CR0)
01A8: 62 67 33 MOV   REG[0x67],0x33     (0057) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
01AB: 62 68 33 MOV   REG[0x68],0x33     (0058) 	mov	reg[68h], 33h		; AnalogLUTControl1 register (ALT_CR1)
01AE: 62 63 00 MOV   REG[0x63],0x0      (0059) 	mov	reg[63h], 00h		; AnalogModulatorControl_0 register (AMD_CR0)
01B1: 62 66 00 MOV   REG[0x66],0x0      (0060) 	mov	reg[66h], 00h		; AnalogModulatorControl_1 register (AMD_CR1)
01B4: 62 D1 00 MOV   REG[0xD1],0x0      (0061) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
01B7: 62 D3 00 MOV   REG[0xD3],0x0      (0062) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
01BA: 62 D0 00 MOV   REG[0xD0],0x0      (0063) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
01BD: 62 D2 00 MOV   REG[0xD2],0x0      (0064) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
01C0: 62 E1 FF MOV   REG[0xE1],0xFF     (0065) 	mov	reg[e1h], ffh		; OscillatorControl_1 register (OSC_CR1)
01C3: 62 E2 00 MOV   REG[0xE2],0x0      (0066) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
01C6: 62 DF FF MOV   REG[0xDF],0xFF     (0067) 	mov	reg[dfh], ffh		; OscillatorControl_3 register (OSC_CR3)
01C9: 62 DE 02 MOV   REG[0xDE],0x2      (0068) 	mov	reg[deh], 02h		; OscillatorControl_4 register (OSC_CR4)
01CC: 62 DD 00 MOV   REG[0xDD],0x0      (0069) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0070) ;  Instance name LCD_1, User Module LCD
                                        (0071) ;  Instance name LED7SEG_1, User Module LED7SEG
                                        (0072) ;       Instance name LED7SEG_1, Block Name MPXTMR(DBB00)
01CF: 62 20 20 MOV   REG[0x20],0x20     (0073) 	mov	reg[20h], 20h		;LED7SEG_1_(DBB00FN)
01D2: 62 21 17 MOV   REG[0x21],0x17     (0074) 	mov	reg[21h], 17h		;LED7SEG_1_(DBB00IN)
01D5: 62 22 40 MOV   REG[0x22],0x40     (0075) 	mov	reg[22h], 40h		;LED7SEG_1_(DBB00OU)
01D8: 70 EF    AND   F,0xEF             
01DA: 70 EF    AND   F,0xEF             
                                        (0076) ;  Instance name LED_BL, User Module LED
                                        (0077) 	M8C_SetBank0
                                        (0078) ;  Ordered Global Register values
                                        (0079) 	M8C_SetBank0
01DC: 62 00 00 MOV   REG[0x0],0x0       (0080) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01DF: 71 10    OR    F,0x10             
                                        (0081) 	M8C_SetBank1
01E1: 62 00 FF MOV   REG[0x0],0xFF      (0082) 	mov	reg[00h], ffh		; Port_0_DriveMode_0 register (PRT0DM0)
01E4: 62 01 00 MOV   REG[0x1],0x0       (0083) 	mov	reg[01h], 00h		; Port_0_DriveMode_1 register (PRT0DM1)
01E7: 70 EF    AND   F,0xEF             
                                        (0084) 	M8C_SetBank0
01E9: 62 03 00 MOV   REG[0x3],0x0       (0085) 	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
01EC: 62 02 00 MOV   REG[0x2],0x0       (0086) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01EF: 71 10    OR    F,0x10             
                                        (0087) 	M8C_SetBank1
01F1: 62 02 00 MOV   REG[0x2],0x0       (0088) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01F4: 62 03 00 MOV   REG[0x3],0x0       (0089) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01F7: 70 EF    AND   F,0xEF             
                                        (0090) 	M8C_SetBank0
01F9: 62 01 00 MOV   REG[0x1],0x0       (0091) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01FC: 62 04 00 MOV   REG[0x4],0x0       (0092) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01FF: 71 10    OR    F,0x10             
                                        (0093) 	M8C_SetBank1
0201: 62 04 7F MOV   REG[0x4],0x7F      (0094) 	mov	reg[04h], 7fh		; Port_1_DriveMode_0 register (PRT1DM0)
0204: 62 05 80 MOV   REG[0x5],0x80      (0095) 	mov	reg[05h], 80h		; Port_1_DriveMode_1 register (PRT1DM1)
0207: 70 EF    AND   F,0xEF             
                                        (0096) 	M8C_SetBank0
0209: 62 07 80 MOV   REG[0x7],0x80      (0097) 	mov	reg[07h], 80h		; Port_1_DriveMode_2 register (PRT1DM2)
020C: 62 06 00 MOV   REG[0x6],0x0       (0098) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
020F: 71 10    OR    F,0x10             
                                        (0099) 	M8C_SetBank1
0211: 62 06 00 MOV   REG[0x6],0x0       (0100) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0214: 62 07 00 MOV   REG[0x7],0x0       (0101) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0217: 70 EF    AND   F,0xEF             
                                        (0102) 	M8C_SetBank0
0219: 62 05 00 MOV   REG[0x5],0x0       (0103) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
021C: 62 08 00 MOV   REG[0x8],0x0       (0104) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
021F: 71 10    OR    F,0x10             
                                        (0105) 	M8C_SetBank1
0221: 62 08 10 MOV   REG[0x8],0x10      (0106) 	mov	reg[08h], 10h		; Port_2_DriveMode_0 register (PRT2DM0)
0224: 62 09 EF MOV   REG[0x9],0xEF      (0107) 	mov	reg[09h], efh		; Port_2_DriveMode_1 register (PRT2DM1)
0227: 70 EF    AND   F,0xEF             
                                        (0108) 	M8C_SetBank0
0229: 62 0B EF MOV   REG[0xB],0xEF      (0109) 	mov	reg[0bh], efh		; Port_2_DriveMode_2 register (PRT2DM2)
022C: 62 0A 00 MOV   REG[0xA],0x0       (0110) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
022F: 71 10    OR    F,0x10             
                                        (0111) 	M8C_SetBank1
0231: 62 0A 00 MOV   REG[0xA],0x0       (0112) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0234: 62 0B 00 MOV   REG[0xB],0x0       (0113) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0237: 70 EF    AND   F,0xEF             
                                        (0114) 	M8C_SetBank0
0239: 62 09 00 MOV   REG[0x9],0x0       (0115) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
023C: 62 0C 00 MOV   REG[0xC],0x0       (0116) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
023F: 71 10    OR    F,0x10             
                                        (0117) 	M8C_SetBank1
0241: 62 0C 00 MOV   REG[0xC],0x0       (0118) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0244: 62 0D FF MOV   REG[0xD],0xFF      (0119) 	mov	reg[0dh], ffh		; Port_3_DriveMode_1 register (PRT3DM1)
0247: 70 EF    AND   F,0xEF             
                                        (0120) 	M8C_SetBank0
0249: 62 0F FF MOV   REG[0xF],0xFF      (0121) 	mov	reg[0fh], ffh		; Port_3_DriveMode_2 register (PRT3DM2)
024C: 62 0E 00 MOV   REG[0xE],0x0       (0122) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
024F: 71 10    OR    F,0x10             
                                        (0123) 	M8C_SetBank1
0251: 62 0E 00 MOV   REG[0xE],0x0       (0124) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0254: 62 0F 00 MOV   REG[0xF],0x0       (0125) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0257: 70 EF    AND   F,0xEF             
                                        (0126) 	M8C_SetBank0
0259: 62 0D 00 MOV   REG[0xD],0x0       (0127) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
025C: 62 10 00 MOV   REG[0x10],0x0      (0128) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
025F: 71 10    OR    F,0x10             
                                        (0129) 	M8C_SetBank1
0261: 62 10 00 MOV   REG[0x10],0x0      (0130) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0264: 62 11 00 MOV   REG[0x11],0x0      (0131) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0267: 70 EF    AND   F,0xEF             
                                        (0132) 	M8C_SetBank0
0269: 62 13 00 MOV   REG[0x13],0x0      (0133) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
026C: 62 12 00 MOV   REG[0x12],0x0      (0134) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
026F: 71 10    OR    F,0x10             
                                        (0135) 	M8C_SetBank1
0271: 62 12 00 MOV   REG[0x12],0x0      (0136) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0274: 62 13 00 MOV   REG[0x13],0x0      (0137) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0277: 70 EF    AND   F,0xEF             
                                        (0138) 	M8C_SetBank0
0279: 62 11 00 MOV   REG[0x11],0x0      (0139) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
027C: 62 14 00 MOV   REG[0x14],0x0      (0140) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
027F: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
0281: 62 14 00 MOV   REG[0x14],0x0      (0142) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0284: 62 15 0F MOV   REG[0x15],0xF      (0143) 	mov	reg[15h], 0fh		; Port_5_DriveMode_1 register (PRT5DM1)
0287: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
0289: 62 17 0F MOV   REG[0x17],0xF      (0145) 	mov	reg[17h], 0fh		; Port_5_DriveMode_2 register (PRT5DM2)
028C: 62 16 00 MOV   REG[0x16],0x0      (0146) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
028F: 71 10    OR    F,0x10             
                                        (0147) 	M8C_SetBank1
0291: 62 16 00 MOV   REG[0x16],0x0      (0148) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0294: 62 17 00 MOV   REG[0x17],0x0      (0149) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0297: 70 EF    AND   F,0xEF             
                                        (0150) 	M8C_SetBank0
0299: 62 15 00 MOV   REG[0x15],0x0      (0151) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
029C: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
029E: 7F       RET                      (0153) 	ret
                                        (0154) 
                                        (0155) 
                                        (0156) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_testled3
                                        (0026) export _LoadConfig_testled3
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_1_DriveMode_0_SHADE
                                        (0030) export _Port_1_DriveMode_0_SHADE
                                        (0031) export Port_1_DriveMode_1_SHADE
                                        (0032) export _Port_1_DriveMode_1_SHADE
                                        (0033) export Port_2_Data_SHADE
                                        (0034) export _Port_2_Data_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------------------------------
                                        (0047) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0048) ;                  parameters handled by boot code, like CPU speed). This
                                        (0049) ;                  function can be called from user code, but typically it
                                        (0050) ;                  is only called from boot.
                                        (0051) ;
                                        (0052) ;       INPUTS: None.
                                        (0053) ;      RETURNS: Nothing.
                                        (0054) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0055) ;               In the large memory model currently only the page
                                        (0056) ;               pointer registers listed below are modified.  This does
                                        (0057) ;               not guarantee that in future implementations of this
                                        (0058) ;               function other page pointer registers will not be
                                        (0059) ;               modified.
                                        (0060) ;          
                                        (0061) ;               Page Pointer Registers Modified: 
                                        (0062) ;               CUR_PP
                                        (0063) ;
                                        (0064) _LoadConfigInit:
                                        (0065)  LoadConfigInit:
                                        (0066)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0067)     
029F: 55 03 00 MOV   [0x3],0x0          (0068) 	mov		[Port_1_Data_SHADE], 0h
02A2: 55 05 7F MOV   [0x5],0x7F         (0069) 	mov		[Port_1_DriveMode_0_SHADE], 7fh
02A5: 55 06 80 MOV   [0x6],0x80         (0070) 	mov		[Port_1_DriveMode_1_SHADE], 80h
02A8: 55 04 00 MOV   [0x4],0x0          (0071) 	mov		[Port_2_Data_SHADE], 0h
                                        (0072) 
02AB: 7C 02 AF LCALL 0x02AF             (0073) 	lcall	LoadConfig_testled3
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
02AE: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration testled3
                                        (0081) ;
                                        (0082) ;    Load configuration registers for testled3.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_testled3:
                                        (0099)  LoadConfig_testled3:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
02AF: 7C 01 50 LCALL 0x0150             (0101)     lcall   LoadConfigTBL_testled3            ; Call load config table routine
02B2: 70 EF    AND   F,0xEF             
                                        (0102) 
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
                                        (0105)     RAM_EPILOGUE RAM_USE_CLASS_4
02B4: 7F       RET                      (0106)     ret
                                        (0107) 
                                        (0108) 
                                        (0109) 
                                        (0110) AREA InterruptRAM(ram, rel)
                                        (0111) 
                                        (0112) NO_SHADOW:
                                        (0113) _NO_SHADOW:
                                        (0114) ; write only register shadows
                                        (0115) _Port_1_Data_SHADE:
                                        (0116) Port_1_Data_SHADE:	BLK	1
                                        (0117) _Port_2_Data_SHADE:
                                        (0118) Port_2_Data_SHADE:	BLK	1
                                        (0119) _Port_1_DriveMode_0_SHADE:
                                        (0120) Port_1_DriveMode_0_SHADE:	BLK	1
                                        (0121) _Port_1_DriveMode_1_SHADE:
                                        (0122) Port_1_DriveMode_1_SHADE:	BLK	1
                                        (0123) 
FILE: lib\led7seg_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: LED7SEG_1INT.asm
                                        (0004) ;;   Version: 1.20, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED7SEG Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "LED7SEG_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _LED7SEG_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _LED7SEG_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _LED7SEG_1_ISR:
                                        (0063) 
02B5: 7C 03 1C LCALL _LED7SEG_1_Update  (0064)    lcall  LED7SEG_1_Update   ; A and X are preserved for this call.
                                        (0065) 
                                        (0066)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ; Insert your custom assembly code below this banner
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ;   NOTE: interrupt service routines must preserve
                                        (0071)    ;   the values of the A and X CPU registers.
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert your custom assembly code above this banner
                                        (0075)    ;---------------------------------------------------
                                        (0076)    
                                        (0077)    ;---------------------------------------------------
                                        (0078)    ; Insert a lcall to a C function below this banner
                                        (0079)    ; and un-comment the lines between these banners
                                        (0080)    ;---------------------------------------------------
                                        (0081)    
                                        (0082)    ;PRESERVE_CPU_CONTEXT
                                        (0083)    ;lcall _My_C_Function
                                        (0084)    ;RESTORE_CPU_CONTEXT
                                        (0085)    
                                        (0086)    ;---------------------------------------------------
                                        (0087)    ; Insert a lcall to a C function above this banner
                                        (0088)    ; and un-comment the lines between these banners
                                        (0089)    ;---------------------------------------------------
                                        (0090)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0091) 
02B8: 7E       RETI                     (0092)    reti
                                        (0093) 
                                        (0094) 
                                        (0095) ; end of file LED7SEG_1INT.asm
FILE: lib\led7seg_1.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED7SEG_1.asm
                                        (0004) ;;  Version: 1.20, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Seven Segment LCD user module.
                                        (0008) ;;
                                        (0009) ;;  LCD connections to PSoC port
                                        (0010) ;;
                                        (0011) ;;    PX.0 ==> SEG a                      a
                                        (0012) ;;    PX.1 ==> SEG b                    =====
                                        (0013) ;;    PX.2 ==> SEG c                   ||   || b
                                        (0014) ;;    PX.3 ==> SEG d                 f || g ||
                                        (0015) ;;    PX.4 ==> SEG e                    =====
                                        (0016) ;;    PX.5 ==> SEG f                   ||   || c
                                        (0017) ;;    PX.6 ==> SEG g                 e ||   ||
                                        (0018) ;;    PX.7 ==> SEG dp                   =====  # dp
                                        (0019) ;;                                        d     
                                        (0020) ;;
                                        (0021) ;;    PY.i       ==> Digit 1        Digit Number
                                        (0022) ;;    PY.(i+1)   ==> Digit 2      +---+---+-    +---+
                                        (0023) ;;    ...                         | 1 | 2 | ... | n |     where n is digit count
                                        (0024) ;;    PY.(i+n-1) ==> Digit n      +---+---+     +---+      
                                        (0025) ;;
                                        (0026) ;;
                                        (0027) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0028) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0029) ;;        This means it is the caller's responsibility to preserve any values
                                        (0030) ;;        in the X and A registers that are still needed after the API functions
                                        (0031) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0032) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0033) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0034) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0035) ;;-----------------------------------------------------------------------------
                                        (0036) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0037) ;;*****************************************************************************
                                        (0038) ;;*****************************************************************************
                                        (0039) 
                                        (0040) include "LED7SEG_1.inc"
                                        (0041) include "memory.inc"
                                        (0042) 
                                        (0043) export _LED7SEG_1_Start
                                        (0044) export  LED7SEG_1_Start
                                        (0045) 
                                        (0046) export _LED7SEG_1_Stop
                                        (0047) export  LED7SEG_1_Stop
                                        (0048) 
                                        (0049) export _LED7SEG_1_Dim
                                        (0050) export  LED7SEG_1_Dim
                                        (0051) 
                                        (0052) export _LED7SEG_1_Update
                                        (0053) export  LED7SEG_1_Update
                                        (0054) 
                                        (0055) export _LED7SEG_1_PutHex
                                        (0056) export  LED7SEG_1_PutHex
                                        (0057) 
                                        (0058) export _LED7SEG_1_PutPattern
                                        (0059) export  LED7SEG_1_PutPattern
                                        (0060) 
                                        (0061) export _LED7SEG_1_DP
                                        (0062) export  LED7SEG_1_DP
                                        (0063) 
                                        (0064) export _LED7SEG_1_DispInt 
                                        (0065) export  LED7SEG_1_DispInt
                                        (0066) 
                                        (0067) export  LED7SEG_1_DigitRAM
                                        (0068) export _LED7SEG_1_DigitRAM
                                        (0069) 
                                        (0070) export  LED7SEG_1_ScanStatus
                                        (0071) export _LED7SEG_1_ScanStatus
                                        (0072) 
                                        (0073) area InterruptRAM(RAM, REL, CON)
                                        (0074) 
                                        (0075)  LED7SEG_1_VarPage:                              ; Dummy label for paging
                                        (0076) 
                                        (0077)  LED7SEG_1_ScanStatus:
                                        (0078) _LED7SEG_1_ScanStatus:                       blk      1
                                        (0079) 
                                        (0080)  LED7SEG_1_DigitRAM:
                                        (0081) _LED7SEG_1_DigitRAM:                         blk      LED7SEG_1_DigitCnt
                                        (0082) 
                                        (0083) AREA UserModules (ROM, REL)
                                        (0084) 
                                        (0085) ;; 
                                        (0086) ;;  char dp g f e   d c b a    Code  Code
                                        (0087) ;;   0    0 0 1 1   1 1 1 1    0x3F  0xC0
                                        (0088) ;;   1    0 0 0 0   0 1 1 0    0x06  0xF9
                                        (0089) ;;   2    0 1 0 1   1 0 1 1    0x5B  0xA4
                                        (0090) ;;   3    0 1 0 0   1 1 1 1    0x4F  0xB0
                                        (0091) ;;   4    0 1 1 0   0 1 1 0    0x66  0x99
                                        (0092) ;;   5    0 1 1 0   1 1 0 1    0x6D  0x92
                                        (0093) ;;   6    0 1 1 1   1 1 0 1    0x7D  0x82
                                        (0094) ;;   7    0 0 0 0   0 1 1 1    0x07  0xF8
                                        (0095) ;;   8    0 1 1 1   1 1 1 1    0x7F  0x80
                                        (0096) ;;   9    0 1 1 0   1 1 1 1    0x6F  0x90
                                        (0097) ;;   A    0 1 1 1   0 1 1 1    0x77  0x88
                                        (0098) ;;   b    0 1 1 1   1 1 0 0    0x7C  0x83
                                        (0099) ;;   C    0 0 1 1   1 0 0 1    0x39  0xC6
                                        (0100) ;;   d    0 1 0 1   1 1 1 0    0x5E  0xA1
                                        (0101) ;;   E    0 1 1 1   1 0 0 1    0x79  0x86
                                        (0102) ;;   F    0 1 1 1   0 0 0 1    0x71  0x8E
                                        (0103) ;;   -    0 1 0 0   0 0 0 0    0x40  0xBF
                                        (0104) 
                                        (0105) 
                                        (0106) 
                                        (0107) .LITERAL
                                        (0108)  LED7SEG_1_HexSegMask:
                                        (0109) 
                                        (0110)      DB   0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07
                                        (0111)      DB   0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71
                                        (0112)      DB   0x40
                                        (0113) 
                                        (0114) 
                                        (0115)  LED7SEG_1_DigitPortMask:
                                        (0116) IF(LED7SEG_1_DigitDrive)  // Active High Digit Drive
                                        (0117)      DB   LED7SEG_1_Dig1Mask
                                        (0118)      DB   LED7SEG_1_Dig2Mask
                                        (0119)      DB   LED7SEG_1_Dig3Mask
                                        (0120)      DB   LED7SEG_1_Dig4Mask
                                        (0121)      DB   LED7SEG_1_Dig5Mask
                                        (0122)      DB   LED7SEG_1_Dig6Mask
                                        (0123)      DB   LED7SEG_1_Dig7Mask
                                        (0124)      DB   LED7SEG_1_Dig8Mask
                                        (0125) ELSE                             // Active Low Digit Drive
                                        (0126)      DB   ~LED7SEG_1_Dig1Mask
                                        (0127)      DB   ~LED7SEG_1_Dig2Mask
                                        (0128)      DB   ~LED7SEG_1_Dig3Mask
                                        (0129)      DB   ~LED7SEG_1_Dig4Mask
                                        (0130)      DB   ~LED7SEG_1_Dig5Mask
                                        (0131)      DB   ~LED7SEG_1_Dig6Mask
                                        (0132)      DB   ~LED7SEG_1_Dig7Mask
                                        (0133)      DB   ~LED7SEG_1_Dig8Mask
                                        (0134) ENDIF
                                        (0135) 
                                        (0136) 
                                        (0137) DEC_TABLE:   ; Used for base10 display
                                        (0138) DW 0x0001, 0x000A, 0x0064, 0x03E8, 0x2710
                                        (0139) ;    1       10     100     1000   10,000
                                        (0140) 
                                        (0141) .ENDLITERAL
                                        (0142) 
                                        (0143) .SECTION
                                        (0144) ;-----------------------------------------------------------------------------
                                        (0145) ;  FUNCTION NAME: LED7SEG_1_Start(void)
                                        (0146) ;
                                        (0147) ;  DESCRIPTION:
                                        (0148) ;     Init state machine and clear buffer memory
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:
                                        (0153) ;    none
                                        (0154) ;
                                        (0155) ;  RETURNS:  none
                                        (0156) ;
                                        (0157) ;  SIDE EFFECTS:
                                        (0158) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0159) ;
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) _LED7SEG_1_Start:
                                        (0162)  LED7SEG_1_Start:
                                        (0163)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0164)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0165)    RAM_SETPAGE_IDX >LED7SEG_1_VarPage
                                        (0166)    RAM_SETPAGE_CUR >LED7SEG_1_VarPage
02DC: 10       PUSH  X                  (0167)    push   X
                                        (0168)    ; Initialize digit RAM
02DD: 57 03    MOV   X,0x3              (0169)    mov    X,(LED7SEG_1_DigitCnt-1)
                                        (0170) .ClearLoop:
02DF: 56 08 00 MOV   [X+8],0x0          (0171)    mov    [X+LED7SEG_1_DigitRAM],LED7SEG_1_SegmentInit
02E2: 79       DEC   X                  (0172)    dec    X
02E3: DF FB    JNC   0x02DF             (0173)    jnc    .ClearLoop
                                        (0174) 
                                        (0175)    ; Set scan bit
02E5: 55 07 80 MOV   [0x7],0x80         (0176)    mov   [LED7SEG_1_ScanStatus],LED7SEG_1_ScanFlag  
02E8: 71 10    OR    F,0x10             
                                        (0177) 
                                        (0178) 
                                        (0179)    M8C_SetBank1
02EA: 43 04 0F OR    REG[0x4],0xF       (0180)    or    reg[LED7SEG_1_DigitPortDM0],LED7SEG_1_DigitMask
02ED: 41 05 F0 AND   REG[0x5],0xF0      (0181)    and   reg[LED7SEG_1_DigitPortDM1],~LED7SEG_1_DigitMask
02F0: 70 EF    AND   F,0xEF             
                                        (0182)    M8C_SetBank0
02F2: 41 07 F0 AND   REG[0x7],0xF0      (0183)    and   reg[LED7SEG_1_DigitPortDM2],~LED7SEG_1_DigitMask
                                        (0184) 
02F5: 20       POP   X                  (0185)    pop   X
                                        (0186) 
                                        (0187) IF (LED7SEG_1_TIMER_PRESENT)
02F6: 43 23 01 OR    REG[0x23],0x1      (0188)    or    reg[LED7SEG_1_CONTROL_REG],  LED7SEG_1_CONTROL_REG_START_BIT
02F9: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0189)    M8C_EnableIntMask LED7SEG_1_INT_REG, LED7SEG_1_INT_MASK
                                        (0190) ENDIF
                                        (0191) 
                                        (0192)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_3
02FC: 7F       RET                      (0194)    ret
                                        (0195) .ENDSECTION
                                        (0196) 
                                        (0197) 
                                        (0198) .SECTION
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;  FUNCTION NAME: LED7SEG_1_Stop(void)
                                        (0201) ;
                                        (0202) ;  DESCRIPTION:
                                        (0203) ;     Stops scanning and turn off all digits
                                        (0204) ;
                                        (0205) ;-----------------------------------------------------------------------------
                                        (0206) ;
                                        (0207) ;  ARGUMENTS:
                                        (0208) ;    none
                                        (0209) ;
                                        (0210) ;  RETURNS:  none
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0214) ;
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) _LED7SEG_1_Stop:
                                        (0217)  LED7SEG_1_Stop:
                                        (0218)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0219)    RAM_SETPAGE_CUR >LED7SEG_1_VarPage
                                        (0220) 
02FD: 08       PUSH  A                  (0221)    push A
                                        (0222)    ; Turn off scan
02FE: 55 07 00 MOV   [0x7],0x0          (0223)    mov   [LED7SEG_1_ScanStatus],0x00 
                                        (0224) 
                                        (0225)    ; Turn off all digits
                                        (0226) IF(1)                                            ; Active High Digit Drive
0301: 26 03 F0 AND   [0x3],0xF0         (0227)    and  [Port_1_Data_SHADE],~LED7SEG_1_DigitMask
                                        (0228) ELSE                                             ; Active Low Digit Drive
                                        (0229)    or   [Port_1_Data_SHADE],LED7SEG_1_DigitMask
                                        (0230) ENDIF
0304: 51 03    MOV   A,[0x3]            (0231)    mov  A,[Port_1_Data_SHADE]    
0306: 60 04    MOV   REG[0x4],A         (0232)    mov  reg[LED7SEG_1_DigitPortDR],A
0308: 18       POP   A                  (0233)    pop  A
0309: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0234) 
                                        (0235) IF (LED7SEG_1_TIMER_PRESENT)
                                        (0236)    M8C_DisableIntMask LED7SEG_1_INT_REG, LED7SEG_1_INT_MASK
030C: 41 23 FE AND   REG[0x23],0xFE     (0237)    and   reg[LED7SEG_1_CONTROL_REG], ~LED7SEG_1_CONTROL_REG_START_BIT
                                        (0238) ENDIF
                                        (0239) 
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_4
030F: 7F       RET                      (0241)    ret
                                        (0242) .ENDSECTION
                                        (0243) 
                                        (0244) 
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: LED7SEG_1_Dim(Byte bDim)
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Init state machine and clear buffer memory
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;    A => bDim   ( Dim Off = 0,  Dim On = 1)
                                        (0257) ;
                                        (0258) ;  RETURNS:  none
                                        (0259) ;
                                        (0260) ;  SIDE EFFECTS:
                                        (0261) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) _LED7SEG_1_Dim:
                                        (0265)  LED7SEG_1_Dim:
                                        (0266)   
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0268)    RAM_SETPAGE_CUR >LED7SEG_1_VarPage
                                        (0269) 
0310: 21 01    AND   A,0x1              (0270)    and    A,0x01
0312: A0 05    JZ    0x0318             (0271)    jz     .DimOff
                                        (0272) 
                                        (0273) .DimOn:
0314: 2E 07 40 OR    [0x7],0x40         (0274)    or     [LED7SEG_1_ScanStatus],LED7SEG_1_DimEnable
                                        (0275)    RAM_EPILOGUE RAM_USE_CLASS_4
0317: 7F       RET                      (0276)    ret
                                        (0277) 
                                        (0278) .DimOff:
0318: 26 07 BF AND   [0x7],0xBF         (0279)    and    [LED7SEG_1_ScanStatus],~LED7SEG_1_DimEnable
                                        (0280)    RAM_EPILOGUE RAM_USE_CLASS_4
031B: 7F       RET                      (0281)    ret
                                        (0282) 
                                        (0283) .ENDSECTION
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: LED7SEG_1_Update(void)
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Advance and display next digit from array.  This function is designed
                                        (0291) ;     to be called from an ISR, although it could be called in the mainline
                                        (0292) ;     of your program.
                                        (0293) ;
                                        (0294) ;     To call this function from a non Large Memory Model (LMM) device,
                                        (0295) ;     in an ISR use the following.
                                        (0296) ;
                                        (0297) ;     lcall LED7SEG_1_Update
                                        (0298) ;
                                        (0299) ;     If using a LMM part, and calling from an ISR, make sure the processor
                                        (0300) ;     is either in page mode 0, or in native page mode.  
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS:
                                        (0305) ;    none
                                        (0306) ;
                                        (0307) ;  RETURNS:  none
                                        (0308) ;
                                        (0309) ;  SIDE EFFECTS:
                                        (0310) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0311) ;
                                        (0312) ;  How It Works:
                                        (0313) ;    *  Check if Scan is on
                                        (0314) ;    *  Blank display, Turn off common drive
                                        (0315) ;    *  Load Segment register
                                        (0316) ;    *  Set proper digit, (Turn on common drive)
                                        (0317) ;    *  Adance counter to next digit
                                        (0318) ;-----------------------------------------------------------------------------
                                        (0319) _LED7SEG_1_Update:
                                        (0320)  LED7SEG_1_Update:
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0323) 
031C: 08       PUSH  A                  (0324)    push  A
031D: 10       PUSH  X                  (0325)    push  X
                                        (0326)    IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0327)       REG_PRESERVE IDX_PP
                                        (0328)       REG_PRESERVE CUR_PP
                                        (0329)    ENDIF
                                        (0330) 
                                        (0331)    RAM_SETPAGE_IDX >LED7SEG_1_VarPage
                                        (0332)    RAM_SETPAGE_CUR >LED7SEG_1_VarPage
                                        (0333) 
031E: 47 07 80 TST   [0x7],0x80         (0334)    tst   [LED7SEG_1_ScanStatus],LED7SEG_1_ScanFlag  // Test if scanning is enabled
0321: A0 3B    JZ    0x035D             (0335)    jz    .Update_End
                                        (0336) 
                                        (0337)    ; Turn off display briefly
                                        (0338) IF(1)                                            ; Active High Digit Drive
0323: 26 03 F0 AND   [0x3],0xF0         (0339)    and  [Port_1_Data_SHADE],~LED7SEG_1_DigitMask
                                        (0340) ELSE                                             ; Active Low Digit Drive
                                        (0341)    or   [Port_1_Data_SHADE],LED7SEG_1_DigitMask
                                        (0342) ENDIF
0326: 51 03    MOV   A,[0x3]            (0343)    mov   A,[Port_1_Data_SHADE]    
0328: 60 04    MOV   REG[0x4],A         (0344)    mov   reg[LED7SEG_1_DigitPortDR],A
                                        (0345) 
                                        (0346)    ; Get the segment value, and write it to the segment port
032A: 51 07    MOV   A,[0x7]            (0347)    mov   A,[LED7SEG_1_ScanStatus]
032C: 21 0F    AND   A,0xF              (0348)    and   A,LED7SEG_1_CntMask                     ; Mask off all but scan position
032E: 4B       SWAP  A,X                (0349)    swap  A,X
                                        (0350) 
                                        (0351)    ; Check for Dim flag
032F: 47 07 20 TST   [0x7],0x20         (0352)    tst   [LED7SEG_1_ScanStatus],LED7SEG_1_DimFlag   ; If set skip update
0332: B0 0E    JNZ   0x0341             (0353)    jnz   .IncDigit
                                        (0354) 
0334: 52 08    MOV   A,[X+8]            (0355)    mov   A,[X+LED7SEG_1_DigitRAM]
                                        (0356) 
                                        (0357) ; Invert here if Active Low segment drive
                                        (0358) IF(1)                                            ; Active Low Segment Drive
                                        (0359)    ; Do nothing
                                        (0360) ELSE
                                        (0361)    cpl   A
                                        (0362) ENDIF
0336: 60 00    MOV   REG[0x0],A         (0363)    mov   reg[LED7SEG_1_SegmentPortDR],A
                                        (0364) 
                                        (0365)    ; Turn digit back on
                                        (0366) 
0338: 5B       MOV   A,X                (0367)    mov   A,X                                     ; Copy index into A
0339: FF 8F    INDEX 0x02CA             (0368)    index LED7SEG_1_DigitPortMask                 ; Digit mask into A
                                        (0369) 
                                        (0370) IF(1)                                            ; Active High Digit Drive
033B: 2C 03    OR    [0x3],A            (0371)    or   [Port_1_Data_SHADE],A
                                        (0372) ELSE                                             ; Active Low Digit Drive
                                        (0373)    and  [Port_1_Data_SHADE],A
                                        (0374) ENDIF
033D: 51 03    MOV   A,[0x3]            (0375)    mov  A,[Port_1_Data_SHADE]
033F: 60 04    MOV   REG[0x4],A         (0376)    mov  reg[LED7SEG_1_DigitPortDR],A
                                        (0377) 
                                        (0378) 
                                        (0379)    ; Calculate next digit
                                        (0380) .IncDigit:
0341: 4B       SWAP  A,X                (0381)    swap  A,X                                     ; Put current digit into A
0342: 74       INC   A                  (0382)    inc   A                                       ; Advance to next
0343: 76 07    INC   [0x7]              (0383)    inc   [LED7SEG_1_ScanStatus]
0345: 11 04    SUB   A,0x4              (0384)    sub   A,LED7SEG_1_DigitCnt
0347: A0 05    JZ    0x034D             (0385)    jz    .Reset_Count
0349: D0 03    JNC   0x034D             (0386)    jnc   .Reset_Count
034B: 80 11    JMP   0x035D             (0387)    jmp   .Update_End
                                        (0388) 
                                        (0389) .Reset_Count:
034D: 26 07 F0 AND   [0x7],0xF0         (0390)    and   [LED7SEG_1_ScanStatus],~LED7SEG_1_CntMask    ; Reset count to zero  
0350: 47 07 40 TST   [0x7],0x40         (0391)    tst   [LED7SEG_1_ScanStatus],LED7SEG_1_DimEnable   ; If set skip update
0353: A0 06    JZ    0x035A             (0392)    jz    .Update_End_DimOff
0355: 36 07 20 XOR   [0x7],0x20         (0393)    xor   [LED7SEG_1_ScanStatus],LED7SEG_1_DimFlag   
0358: 80 04    JMP   0x035D             (0394)    jmp   .Update_End
                                        (0395) 
                                        (0396) .Update_End_DimOff:                              ; Make sure Dim is off
035A: 26 07 DF AND   [0x7],0xDF         (0397)    and   [LED7SEG_1_ScanStatus],~LED7SEG_1_DimFlag    ; Make sure dim flag off
                                        (0398) 
                                        (0399) .Update_End:
                                        (0400)    IF (SYSTEM_LARGE_MEMORY_MODEL)  
                                        (0401)       REG_RESTORE CUR_PP
                                        (0402)       REG_RESTORE IDX_PP
                                        (0403)    ENDIF
                                        (0404) 
035D: 20       POP   X                  (0405)    pop   X
035E: 18       POP   A                  (0406)    pop   A
                                        (0407) .Update_Exit:
                                        (0408) 
                                        (0409)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_4
035F: 7F       RET                      (0411)    ret
                                        (0412) .ENDSECTION
                                        (0413) 
                                        (0414) .SECTION
                                        (0415) ;-----------------------------------------------------------------------------
                                        (0416) ;  FUNCTION NAME: LED7SEG_1_PutHex(BYTE bValue, BYTE bDigit)
                                        (0417) ;
                                        (0418) ;  DESCRIPTION:
                                        (0419) ;     Write hex value to one of the digits
                                        (0420) ;
                                        (0421) ;-----------------------------------------------------------------------------
                                        (0422) ;
                                        (0423) ;  ARGUMENTS:
                                        (0424) ;    A => Value to display
                                        (0425) ;    X => Digit to update  ( 1 to n )
                                        (0426) ;
                                        (0427) ;  RETURNS:  none
                                        (0428) ;
                                        (0429) ;  SIDE EFFECTS:
                                        (0430) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0431) ;
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) _LED7SEG_1_PutHex:
                                        (0434)  LED7SEG_1_PutHex:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_3  
                                        (0436)    RAM_SETPAGE_IDX >LED7SEG_1_VarPage
                                        (0437)   
0360: FF 57    INDEX 0x02B9             (0438)    index   LED7SEG_1_HexSegMask                  ; Get code
0362: 79       DEC   X                  (0439)    dec     X                                     ; Dec to shift from (1 to N) to (0 to N-1)
0363: 4B       SWAP  A,X                (0440)    swap    A,X                                   ; Code in X, index in A
0364: 39 04    CMP   A,0x4              (0441)    cmp     A,(LED7SEG_1_DigitCnt)
0366: D0 07    JNC   0x036E             (0442)    jnc     .putHex_End
                                        (0443) 
0368: 4B       SWAP  A,X                (0444)    swap    A,X                                   ; Code in A, index in X
0369: 27 08 80 AND   [X+8],0x80         (0445)    and     [X+LED7SEG_1_DigitRAM],0x80
036C: 2D 08    OR    [X+8],A            (0446)    or      [X+LED7SEG_1_DigitRAM],A
                                        (0447) .putHex_End:
                                        (0448)    RAM_EPILOGUE RAM_USE_CLASS_3
036E: 7F       RET                      (0449)    ret
                                        (0450) .ENDSECTION
                                        (0451) 
                                        (0452) .SECTION
                                        (0453) ;-----------------------------------------------------------------------------
                                        (0454) ;  FUNCTION NAME: LED7SEG_1_PutPattern(BYTE bPattern, BYTE bDigit)
                                        (0455) ;
                                        (0456) ;  DESCRIPTION:
                                        (0457) ;     Write pattern to 7 segment display
                                        (0458) ;
                                        (0459) ;-----------------------------------------------------------------------------
                                        (0460) ;
                                        (0461) ;  ARGUMENTS:
                                        (0462) ;    A => Pattern to display
                                        (0463) ;    X => Digit to update  ( 1 to n )
                                        (0464) ;
                                        (0465) ;  RETURNS:  none
                                        (0466) ;
                                        (0467) ;  SIDE EFFECTS:
                                        (0468) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0469) ;
                                        (0470) ;-----------------------------------------------------------------------------
                                        (0471) _LED7SEG_1_PutPattern:
                                        (0472)  LED7SEG_1_PutPattern:
                                        (0473)    RAM_PROLOGUE RAM_USE_CLASS_3  
                                        (0474)    RAM_SETPAGE_IDX >LED7SEG_1_VarPage
                                        (0475)   
036F: 79       DEC   X                  (0476)    dec     X                                     ; Dec to shift from (1 to N) to (0 to N-1)
0370: 4B       SWAP  A,X                (0477)    swap    A,X                                   ; Code in X, index in A
0371: 39 04    CMP   A,0x4              (0478)    cmp     A,(LED7SEG_1_DigitCnt)
0373: D0 04    JNC   0x0378             (0479)    jnc     .putPat_End
                                        (0480) 
0375: 4B       SWAP  A,X                (0481)    swap    A,X                                   ; Code in A, index in X
0376: 54 08    MOV   [X+8],A            (0482)    mov     [X+LED7SEG_1_DigitRAM],A
                                        (0483) .putPat_End:
                                        (0484)    RAM_EPILOGUE RAM_USE_CLASS_3
0378: 7F       RET                      (0485)    ret
                                        (0486) .ENDSECTION
                                        (0487) 
                                        (0488) .SECTION
                                        (0489) ;-----------------------------------------------------------------------------
                                        (0490) ;  FUNCTION NAME: LED7SEG_1_DP(BYTE bDpOnOff, BYTE bDigit)
                                        (0491) ;
                                        (0492) ;  DESCRIPTION:
                                        (0493) ;     Set the decimal point with the given mask.
                                        (0494) ;
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;
                                        (0497) ;  ARGUMENTS:
                                        (0498) ;    A => DP ON/OFF (0 = DP Off, 1 = DP On)
                                        (0499) ;    X => Digit  (1 to N)
                                        (0500) ;
                                        (0501) ;  RETURNS:  none
                                        (0502) ;
                                        (0503) ;  SIDE EFFECTS:
                                        (0504) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0505) ;
                                        (0506) ;-----------------------------------------------------------------------------
                                        (0507) _LED7SEG_1_DP:
                                        (0508)  LED7SEG_1_DP:
                                        (0509)    RAM_PROLOGUE RAM_USE_CLASS_3  
                                        (0510)    RAM_SETPAGE_IDX >LED7SEG_1_VarPage
0379: 79       DEC   X                  (0511)    dec    X                                      ; noramlize from 1 - N, to 0 to N-1
037A: 4B       SWAP  A,X                (0512)    swap   A,X
037B: 39 04    CMP   A,0x4              (0513)    cmp    A,(LED7SEG_1_DigitCnt)
037D: D0 0E    JNC   0x038C             (0514)    jnc    .DP_End
                                        (0515)    
037F: 4B       SWAP  A,X                (0516)    swap   A,X
0380: 39 00    CMP   A,0x0              (0517)    cmp    A,0x00                                 ; Is flag set
0382: A0 06    JZ    0x0389             (0518)    jz     .DPOff
                                        (0519) 
0384: 2F 08 80 OR    [X+8],0x80         (0520)    or     [X+LED7SEG_1_DigitRAM],0x80            ; Set DP
0387: 80 04    JMP   0x038C             (0521)    jmp    .DP_End
                                        (0522) .DPOff:
0389: 27 08 7F AND   [X+8],0x7F         (0523)    and    [X+LED7SEG_1_DigitRAM],0x7F            ; Clear DP
                                        (0524) 
                                        (0525) .DP_End:
                                        (0526)    RAM_EPILOGUE RAM_USE_CLASS_3
038C: 7F       RET                      (0527)    ret
                                        (0528) .ENDSECTION
                                        (0529) 
                                        (0530) 
                                        (0531) .SECTION
                                        (0532) ;-----------------------------------------------------------------------------
                                        (0533) ;  FUNCTION NAME: LED7SEG_1_DispInt(int iValue, BYTE bPos, BYTE bLSD)
                                        (0534) ;
                                        (0535) ;  DESCRIPTION:
                                        (0536) ;     Display integer on 7-Segment display
                                        (0537) ;
                                        (0538) ;-----------------------------------------------------------------------------
                                        (0539) ;
                                        (0540) ;  ARGUMENTS:
                                        (0541) ;          [SP-3] => iValue[7:0]   Value to convert
                                        (0542) ;          [SP-4] => iValue[15:8]  
                                        (0543) ;          [SP-5] => bPos[7:0]     Digit starting position
                                        (0544) ;          [SP-6] => bLSD[7:0]     Digits to display
                                        (0545) ;
                                        (0546) ;
                                        (0547) ;  RETURNS:  none
                                        (0548) ;
                                        (0549) ;  SIDE EFFECTS:
                                        (0550) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0551) ;
                                        (0552) ;-----------------------------------------------------------------------------
                                        (0553) ;
                                        (0554) DI_ValueLSB:   equ   -3
                                        (0555) DI_ValueMSB:   equ   -4
                                        (0556) DI_POS:        equ   -5
                                        (0557) DI_LSD:        equ   -6
                                        (0558) DI_DECPTR:     equ    0
                                        (0559) DI_RESULT:     equ    1
                                        (0560) DI_TMP:        equ    2
                                        (0561) DI_STACKSIZE:  equ    3
                                        (0562) 
                                        (0563) _LED7SEG_1_DispInt:
                                        (0564)  LED7SEG_1_DispInt:
                                        (0565)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0566)    
038D: 4F       MOV   X,SP               (0567)    mov   X,SP                                    ; Get copy of the stack pointer
038E: 38 03    ADD   SP,0x3             (0568)    add   SP,DI_STACKSIZE                         ; Make some extra room for vars
                                        (0569) 
                                        (0570)    ; Testing only
0390: 52 FC    MOV   A,[X-4]            (0571)    mov   A,[X+DI_ValueMSB]
0392: 52 FD    MOV   A,[X-3]            (0572)    mov   A,[X+DI_ValueLSB]
0394: 52 FB    MOV   A,[X-5]            (0573)    mov   A,[X+DI_POS]
0396: 7B FA    DEC   [X-6]              (0574)    dec   [X+DI_LSD]                              ; shift count from [1 to N] to [0 to N-1]
                                        (0575) 
0398: 56 00 04 MOV   [X+0],0x4          (0576)    mov   [X+DI_DECPTR],4                         ; Load dec ptr with 10000 value
                                        (0577) 
                                        (0578) 
                                        (0579)    ; Comapare input value to decade
                                        (0580) .DEC_LOOP_TOP:
039B: 56 01 00 MOV   [X+1],0x0          (0581)    mov   [X+DI_RESULT],0                         ; Reset result
                                        (0582) .DEC_LOOP:
                                        (0583)    ; Compare MSB
039E: 52 00    MOV   A,[X+0]            (0584)    mov   A,[X+DI_DECPTR]
03A0: 64       ASL   A                  (0585)    asl   A                                       ; Index it for 2 (word) bytes ber value
03A1: FF 2F    INDEX 0x02D2             (0586)    index DEC_TABLE
03A3: 3B FC    CMP   A,[X-4]            (0587)    cmp   A,[X+DI_ValueMSB]                       ; Is 10^x > Value  (10^x - value)
03A5: C0 0F    JC    0x03B5             (0588)    jc    .DO_INC_SUB                             ; If value is still bigger, increment and subtract
03A7: B0 24    JNZ   0x03CC             (0589)    jnz   .TRY_NEXT_DEC
                                        (0590) 
                                        (0591)    ; Compare LSB only if MSB values were equal
03A9: 52 00    MOV   A,[X+0]            (0592)    mov   A,[X+DI_DECPTR]                         ; Get LSB of DEC value
03AB: 64       ASL   A                  (0593)    asl   A                                       ; Index it for 2 bytes per value
03AC: 74       INC   A                  (0594)    inc   A                                       ; Advance to LSB value
03AD: FF 23    INDEX 0x02D2             (0595)    index DEC_TABLE
03AF: 3B FD    CMP   A,[X-3]            (0596)    cmp   A,[X+DI_ValueLSB]                       ; Is 10^x > Value  (10^x - value)
03B1: C0 03    JC    0x03B5             (0597)    jc    .DO_INC_SUB                             ; If value is still bigger, increment and subtract
03B3: B0 18    JNZ   0x03CC             (0598)    jnz   .TRY_NEXT_DEC
                                        (0599)                                                  ; If it fell through, they are equal
                                        (0600) .DO_INC_SUB:
03B5: 77 01    INC   [X+1]              (0601)    inc   [X+DI_RESULT]                           ; Increment the result counter
                                        (0602)    ; Subtract DEC value from Value
03B7: 52 00    MOV   A,[X+0]            (0603)    mov   A,[X+DI_DECPTR]
03B9: 64       ASL   A                  (0604)    asl   A                                       ; Index it for 2 bytes per value
03BA: FF 16    INDEX 0x02D2             (0605)    index DEC_TABLE
03BC: 54 02    MOV   [X+2],A            (0606)    mov   [X+DI_TMP],A                            ; Store this value for a moment  
                                        (0607) 
03BE: 52 00    MOV   A,[X+0]            (0608)    mov   A,[X+DI_DECPTR]                         ; Get LSB of DEC value
03C0: 64       ASL   A                  (0609)    asl   A                                       ; Index it for 2 bytes per value
03C1: 74       INC   A                  (0610)    inc   A                                       ; Advance to LSB value
03C2: FF 0E    INDEX 0x02D2             (0611)    index DEC_TABLE
03C4: 15 FD    SUB   [X-3],A            (0612)    sub   [X+DI_ValueLSB],A                       ; Is 10^x > Value  (10^x - value)
03C6: 52 02    MOV   A,[X+2]            (0613)    mov   A,[X+DI_TMP]
03C8: 1D FC    SBB   [X-4],A            (0614)    sbb   [X+DI_ValueMSB],A
03CA: 8F D3    JMP   0x039E             (0615)    jmp   .DEC_LOOP                               ; Keep subtracting until less than.
                                        (0616)    
                                        (0617) .TRY_NEXT_DEC:                                   ; Completed last decade
                                        (0618) 
03CC: 52 FA    MOV   A,[X-6]            (0619)    mov   A,[X+DI_LSD]                            ; Get first position
03CE: 3B 00    CMP   A,[X+0]            (0620)    cmp   A,[X+DI_DECPTR]      
03D0: C0 0B    JC    0x03DC             (0621)    jc    .SkipPrint                              ; Not ready skip the print
                                        (0622) 
                                        (0623) 
                                        (0624)    ; Figure if digit should be displayed
03D2: 52 01    MOV   A,[X+1]            (0625)    mov   A,[X+DI_RESULT]                         ; Get result
03D4: 10       PUSH  X                  (0626)    push  X
03D5: 59 FB    MOV   X,[X-5]            (0627)    mov   X,[X+DI_POS]                            ; Load Position
                                        (0628) 
                                        (0629)    RAM_EPILOGUE RAM_USE_CLASS_2
03D7: 9F 87    CALL  _LED7SEG_1_PutHex  (0630)    call  LED7SEG_1_PutHex
                                        (0631)    RAM_PROLOGUE RAM_USE_CLASS_2                  ; Restore system to class 2 memory mode
03D9: 20       POP   X                  (0632)    pop   X
03DA: 77 FB    INC   [X-5]              (0633)    inc   [X+DI_POS]                              ; Next time print to the right
                                        (0634) 
                                        (0635) .SkipPrint:
03DC: 56 01 00 MOV   [X+1],0x0          (0636)    mov   [X+DI_RESULT],0
03DF: 7B 00    DEC   [X+0]              (0637)    dec   [X+DI_DECPTR]
03E1: BF BC    JNZ   0x039E             (0638)    jnz   .DEC_LOOP
                                        (0639) 
03E3: 52 FD    MOV   A,[X-3]            (0640)    mov   A,[X+DI_ValueLSB]                       ; Is 10^x > Value  (10^x - value)
03E5: 59 FB    MOV   X,[X-5]            (0641)    mov   X,[X+DI_POS]                            ; Load Position
                                        (0642) 
                                        (0643)    RAM_EPILOGUE RAM_USE_CLASS_2
03E7: 9F 77    CALL  _LED7SEG_1_PutHex  (0644)    call  LED7SEG_1_PutHex
                                        (0645)    RAM_PROLOGUE RAM_USE_CLASS_2                  ; Restore system to class 2 memory mode
                                        (0646) 
                                        (0647) .DispInt_End:
03E9: 38 FD    ADD   SP,0xFD            (0648)    add   SP,-DI_STACKSIZE                        ; Restore stack
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_2
03EB: 7F       RET                      (0650)    ret
FILE: C:\Users\revecom\Desktop\PSOC\TestLed3\TestLed3\TestLed3\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) 
(0009) /* hay hata serveuse baz3et alia l9ahwa*/
(0010) /*
(0011) void main(void)
(0012) {
(0013) 	/*9bal question 5 mala hayet*/
(0014) 	/*part1*/
(0015) 	/*
(0016) 	char s[] = "Hello Lcd";
(0017) 	char rows=0,cols=0,code;
(0018) 	LED_BL_Start();
(0019) 	LED_BL_Switch(1);
(0020) 	// M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
(0021) 	// Insert your main routine code here.
(0022) 	LCD_1_Start();
(0023) 	/*enable eclarage led*/
(0024) 	/*
(0025) 	LCD_1_Position(0, 4);
(0026) 	LCD_1_PrString(s);
(0027) 	LCD_1_Position(1, 4);
(0028) 	LCD_1_PrCString("Ah Ya Denia");  */
(0029) 	
(0030) 	
(0031) 	
(0032) 	/*part2  : keyboard w lcd*/
(0033) 	/*
(0034) 	PRT4DR = 0xf0;
(0035) 	cols=PRT4DR;
(0036) 	PRT4DR=0x0f;
(0037) 	rows=PRT4DR;
(0038) 	code = rows & cols; 
(0039) 	while (1){
(0040) 		switch (code) {
(0041) 			    case 0x18 :
(0042) 				LCD_1_Position(0, 4);
(0043) 				LCD_1_PrCString("B1");
(0044) 				break; 
(0045) 			    case 0x14 :
(0046) 				LCD_1_Position(0, 4);
(0047) 				LCD_1_PrCString("B2");
(0048) 				break;
(0049) 			    case 0x12 :
(0050) 				LCD_1_Position(0, 4);
(0051) 				LCD_1_PrCString("B3");
(0052) 				break;
(0053) 			    case 0x11 :
(0054) 				LCD_1_Position(0, 4);
(0055) 				LCD_1_PrCString("B4");
(0056) 				break;
(0057) 			    case 0x28 :
(0058) 				LCD_1_Position(0, 4);
(0059) 				LCD_1_PrCString("B5");
(0060) 				break;
(0061) 				
(0062) 			    case 0x24 :
(0063) 				LCD_1_Position(0, 4);
(0064) 				LCD_1_PrCString("B6");
(0065) 				break;
(0066) 				case 0x22 :
(0067) 				LCD_1_Position(0, 4);
(0068) 				LCD_1_PrCString("B7");
(0069) 				break;
(0070) 				case 0x21 :
(0071) 				LCD_1_Position(0, 4);
(0072) 				LCD_1_PrCString("B8");
(0073) 				break;
(0074) 				case 0x48 :
(0075) 				LCD_1_Position(0, 4);
(0076) 				LCD_1_PrCString("B9");
(0077)                 case 0x44 :
(0078) 				LCD_1_Position(0, 4);
(0079) 				LCD_1_PrCString("B10");
(0080) 				break;
(0081) 				case 0x42 :
(0082) 				LCD_1_Position(0, 4);
(0083) 				LCD_1_PrCString("B11");
(0084) 				case 0x41 :
(0085) 				LCD_1_Position(0, 4);
(0086) 				LCD_1_PrCString("B12");
(0087) 				break;
(0088) 				case 0x88 :
(0089) 				LCD_1_Position(0, 4);
(0090) 				LCD_1_PrCString("B13");
(0091) 				break;
(0092) 				case 0x84 :
(0093) 				LCD_1_Position(0, 4);
(0094) 				LCD_1_PrCString("B4");
(0095) 				break;
(0096) 				case 0x82 :
(0097) 				LCD_1_Position(0, 4);
(0098) 				LCD_1_PrCString("B15");
(0099) 				break;
(0100) 				case 0x81 :
(0101) 				LCD_1_Position(0, 4);
(0102) 				LCD_1_PrCString("B16");
(0103) 				break;	
(0104) 				default :
(0105) 				LCD_1_Position(0, 4);
(0106) 				LCD_1_PrCString("Aucune Bouton N'est activée"); } fin switch
(0107) 	/* ps : l port4 c est un registre , shih mellowel initialisee 0f w ntaih l rows f f0 lel cols 
(0108) 				w code tekhou l produit , mais kol mal value ta l port4 tetbadel , l code automatiquement yetbadel sans inteventions
(0109) 				du soft , c'est purement de hardware ici*/
(0110) 	
(0111) 	
(0112) /* saisie de user*/				
(0113) 	
(0114) 	/*	
(0115) 	
(0116) }
(0117) }
(0118) */
(0119) /*7 segment*/
(0120) 
(0121) 
(0122) void main(void){
__UserModules_end|__text_start|_main|_main:
  decom                --> X+7
  cols                 --> X+6
  rows                 --> X+5
  code                 --> X+4
  val                  --> X+2
  comp                 --> X+0
    03EC: 10       PUSH  X
    03ED: 4F       MOV   X,SP
    03EE: 38 0B    ADD   SP,0xB
(0123)    int val=1111,comp=0,decom=20;
    03F0: 56 03 57 MOV   [X+3],0x57
    03F3: 56 02 04 MOV   [X+2],0x4
    03F6: 56 01 00 MOV   [X+1],0x0
    03F9: 56 00 00 MOV   [X+0],0x0
    03FC: 56 08 14 MOV   [X+8],0x14
    03FF: 56 07 00 MOV   [X+7],0x0
(0124)    char rows=0,cols=0,code;
    0402: 56 05 00 MOV   [X+5],0x0
    0405: 56 06 00 MOV   [X+6],0x0
(0125)    PRT4DR =0x0f;
    0408: 62 10 0F MOV   REG[0x10],0xF
(0126)    rows=  PRT4DR;
    040B: 5D 10    MOV   A,REG[0x10]
    040D: 54 05    MOV   [X+5],A
(0127)    PRT4DR=0xf0;
    040F: 62 10 F0 MOV   REG[0x10],0xF0
(0128)    cols=PRT4DR;
    0412: 5D 10    MOV   A,REG[0x10]
    0414: 54 06    MOV   [X+6],A
(0129)    code=rows & cols;
    0416: 52 05    MOV   A,[X+5]
    0418: 23 06    AND   A,[X+6]
    041A: 54 04    MOV   [X+4],A
(0130) 	
(0131)    LED7SEG_1_Start()          // Enable display
    041C: 7C 02 DC LCALL _LED7SEG_1_Start
    041F: 71 01    OR    F,0x1
(0132)    M8C_EnableGInt;  
(0133)    M8C_EnableGInt;// Enable IRQ 
    0421: 71 01    OR    F,0x1
    0423: 80 74    JMP   0x0498
(0134)    
(0135) 	/*1 ) 
(0136)             
(0137) 
(0138) // Enable multiplex timer here if using
(0139)    // non-built-in-timer version.
(0140)    LED7SEG_1_DispInt(1234, 1, 4); // Display "1234"
(0141)    LED7SEG_1_DP(1, 3);            // Turn on DP ( 123.4 )
(0142) }
(0143) 
(0144) */
(0145) //2) 
(0146) 	/*se de 11.11 vers 99.99*/
(0147) 	/*
(0148) 	while (1){
(0149) 	while (val < 11110){
(0150) 	LED7SEG_1_DispInt(val, 2,5); //digit2/digit3/digit4/digit5
(0151) 	LED7SEG_1_DP(1,3);            //pour 1111 => 11.11
(0152) 	val+=1111;	
(0153) 	}
(0154) 	val=1111;
(0155) 	}
(0156) 	
(0157) 	
(0158) }*/
(0159) ///3
(0160) 	while (1){
(0161) 		
(0162) 		switch (code) {
    0425: 52 04    MOV   A,[X+4]
    0427: 54 0A    MOV   [X+10],A
    0429: 56 09 00 MOV   [X+9],0x0
    042C: 52 0A    MOV   A,[X+10]
    042E: 11 18    SUB   A,0x18
    0430: 53 00    MOV   [__rY],A
    0432: 52 09    MOV   A,[X+9]
    0434: 31 80    XOR   A,0x80
    0436: 19 80    SBB   A,0x80
    0438: C0 5F    JC    0x0498
    043A: 2A 00    OR    A,[__rY]
    043C: A0 25    JZ    0x0462
    043E: 3D 09 00 CMP   [X+9],0x0
    0441: B0 06    JNZ   0x0448
    0443: 3D 0A 81 CMP   [X+10],0x81
    0446: A0 41    JZ    0x0488
    0448: 80 4F    JMP   0x0498
(0163) 			case 0x18 :  //b1
(0164) 				while (comp < 21 ) {
(0165) 					LED7SEG_1_DispInt(val, 1,2);
    044A: 10       PUSH  X
    044B: 50 02    MOV   A,0x2
    044D: 08       PUSH  A
    044E: 50 01    MOV   A,0x1
    0450: 08       PUSH  A
    0451: 52 02    MOV   A,[X+2]
    0453: 08       PUSH  A
    0454: 52 03    MOV   A,[X+3]
    0456: 08       PUSH  A
    0457: 7C 03 8D LCALL _LED7SEG_1_DispInt
    045A: 38 FC    ADD   SP,0xFC
    045C: 20       POP   X
(0166) 					comp+=1;
    045D: 77 01    INC   [X+1]
    045F: 0F 00 00 ADC   [X+0],0x0
(0167) 				}
    0462: 52 01    MOV   A,[X+1]
    0464: 11 15    SUB   A,0x15
    0466: 52 00    MOV   A,[X+0]
    0468: 31 80    XOR   A,0x80
    046A: 19 80    SBB   A,0x80
    046C: CF DD    JC    0x044A
(0168) 				break;
    046E: 80 29    JMP   0x0498
(0169) 			case 0x81 : //b16
(0170) 				while (comp > 0 ) {
(0171) 					LED7SEG_1_DispInt(val, 1,2);
    0470: 10       PUSH  X
    0471: 50 02    MOV   A,0x2
    0473: 08       PUSH  A
    0474: 50 01    MOV   A,0x1
    0476: 08       PUSH  A
    0477: 52 02    MOV   A,[X+2]
    0479: 08       PUSH  A
    047A: 52 03    MOV   A,[X+3]
    047C: 08       PUSH  A
    047D: 7C 03 8D LCALL _LED7SEG_1_DispInt
    0480: 38 FC    ADD   SP,0xFC
    0482: 20       POP   X
(0172) 					comp-=1;
    0483: 7B 01    DEC   [X+1]
    0485: 1F 00 00 SBB   [X+0],0x0
(0173) 				}
    0488: 50 00    MOV   A,0x0
    048A: 13 01    SUB   A,[X+1]
    048C: 52 00    MOV   A,[X+0]
    048E: 31 80    XOR   A,0x80
    0490: 53 01    MOV   [__rX],A
    0492: 50 80    MOV   A,0x80
    0494: 1A 01    SBB   A,[__rX]
    0496: CF D9    JC    0x0470
(0174) 			
(0175) 			
(0176) 			    break;;	
(0177) 		}
(0178) 		
(0179) 		
(0180) 	}
    0498: 8F 8C    JMP   0x0425
(0181) }
(0182)  
(0183) 	    049A: 38 F5    ADD   SP,0xF5
    049C: 20       POP   X
    049D: 8F FF    JMP   0x049D
