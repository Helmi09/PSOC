FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 04 B7 LJMP  _DELSIG11_1_ADConversion_ISR(0149)     ljmp	_DELSIG11_1_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 2A    MOV   A,0x2A             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [_ramareas_end+206],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+207],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 86 LCALL 0x0286             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 0A 1B MOV   [__r0],0x1B        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 0A 2A CMP   [__r0],0x2A        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 0A    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 C1    MOV   X,0xC1             (0368)     mov  X,<__idata_start
00AC: 55 0A 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 0A 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 0A    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 05 8F LCALL __UserModules_end|_main|__text_start|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
01C1: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_testled4_Bank1
                                        (0019) export LoadConfigTBL_testled4_Bank0
                                        (0020) export LoadConfigTBL_testled4_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_testled4_Bank0:
                                        (0023) ;  Instance name DELSIG11_1, User Module DELSIG11
                                        (0024) ;       Instance name DELSIG11_1, Block Name ADC(ASC10)
                                        (0025) 	db		80h, 90h		;DELSIG11_1_AtoDcr0(ASC10CR0)
                                        (0026) 	db		81h, e0h		;DELSIG11_1_AtoDcr1(ASC10CR1)
                                        (0027) 	db		82h, 60h		;DELSIG11_1_AtoDcr2(ASC10CR2)
                                        (0028) 	db		83h, f0h		;DELSIG11_1_AtoDcr3(ASC10CR3)
                                        (0029) ;       Instance name DELSIG11_1, Block Name TMR(DBB00)
                                        (0030) 	db		23h, 00h		;DELSIG11_1_TimerCR0(DBB00CR0)
                                        (0031) 	db		21h, 00h		;DELSIG11_1_TimerDR1(DBB00DR1)
                                        (0032) 	db		22h, 00h		;DELSIG11_1_TimerDR2(DBB00DR2)
                                        (0033) ;  Instance name LCD_1, User Module LCD
                                        (0034) ;  Instance name LED_BL, User Module LED
                                        (0035) ;  Global Register values Bank 0
                                        (0036) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0037) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0038) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0039) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0040) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0041) 	db		e7h, 02h		; DecimatorControl_1 register (DEC_CR1)
                                        (0042) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0043) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0044) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0045) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0046) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0047) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0048) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0049) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0050) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0051) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0052) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0053) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0054) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0055) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0056) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0057) 	db		ffh
                                        (0058) LoadConfigTBL_testled4_Bank1:
                                        (0059) ;  Instance name DELSIG11_1, User Module DELSIG11
                                        (0060) ;       Instance name DELSIG11_1, Block Name ADC(ASC10)
                                        (0061) ;       Instance name DELSIG11_1, Block Name TMR(DBB00)
                                        (0062) 	db		20h, 20h		;DELSIG11_1_TimerFN(DBB00FN)
                                        (0063) 	db		21h, 16h		;DELSIG11_1_TimerSL(DBB00IN)
                                        (0064) 	db		22h, 40h		;DELSIG11_1_TimerOS(DBB00OU)
                                        (0065) ;  Instance name LCD_1, User Module LCD
                                        (0066) ;  Instance name LED_BL, User Module LED
                                        (0067) ;  Global Register values Bank 1
                                        (0068) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0069) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0070) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0071) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0072) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0073) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0074) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0075) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0076) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0077) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0078) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0079) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0080) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0081) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0082) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0083) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0084) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0085) 	db		ffh
                                        (0086) AREA psoc_config(rom, rel)
                                        (0087) LoadConfigTBL_testled4_Ordered:
                                        (0088) ;  Ordered Global Register values
                                        (0089) 	M8C_SetBank0
01C3: 62 00 00 MOV   REG[0x0],0x0       (0090) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01C6: 71 10    OR    F,0x10             
                                        (0091) 	M8C_SetBank1
01C8: 62 00 00 MOV   REG[0x0],0x0       (0092) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
01CB: 62 01 FF MOV   REG[0x1],0xFF      (0093) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
01CE: 70 EF    AND   F,0xEF             
                                        (0094) 	M8C_SetBank0
01D0: 62 03 FF MOV   REG[0x3],0xFF      (0095) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
01D3: 62 02 00 MOV   REG[0x2],0x0       (0096) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01D6: 71 10    OR    F,0x10             
                                        (0097) 	M8C_SetBank1
01D8: 62 02 00 MOV   REG[0x2],0x0       (0098) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01DB: 62 03 00 MOV   REG[0x3],0x0       (0099) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01DE: 70 EF    AND   F,0xEF             
                                        (0100) 	M8C_SetBank0
01E0: 62 01 00 MOV   REG[0x1],0x0       (0101) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01E3: 62 04 00 MOV   REG[0x4],0x0       (0102) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01E6: 71 10    OR    F,0x10             
                                        (0103) 	M8C_SetBank1
01E8: 62 04 7F MOV   REG[0x4],0x7F      (0104) 	mov	reg[04h], 7fh		; Port_1_DriveMode_0 register (PRT1DM0)
01EB: 62 05 80 MOV   REG[0x5],0x80      (0105) 	mov	reg[05h], 80h		; Port_1_DriveMode_1 register (PRT1DM1)
01EE: 70 EF    AND   F,0xEF             
                                        (0106) 	M8C_SetBank0
01F0: 62 07 80 MOV   REG[0x7],0x80      (0107) 	mov	reg[07h], 80h		; Port_1_DriveMode_2 register (PRT1DM2)
01F3: 62 06 00 MOV   REG[0x6],0x0       (0108) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
01F6: 71 10    OR    F,0x10             
                                        (0109) 	M8C_SetBank1
01F8: 62 06 00 MOV   REG[0x6],0x0       (0110) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01FB: 62 07 00 MOV   REG[0x7],0x0       (0111) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01FE: 70 EF    AND   F,0xEF             
                                        (0112) 	M8C_SetBank0
0200: 62 05 00 MOV   REG[0x5],0x0       (0113) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0203: 62 08 00 MOV   REG[0x8],0x0       (0114) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0206: 71 10    OR    F,0x10             
                                        (0115) 	M8C_SetBank1
0208: 62 08 10 MOV   REG[0x8],0x10      (0116) 	mov	reg[08h], 10h		; Port_2_DriveMode_0 register (PRT2DM0)
020B: 62 09 EF MOV   REG[0x9],0xEF      (0117) 	mov	reg[09h], efh		; Port_2_DriveMode_1 register (PRT2DM1)
020E: 70 EF    AND   F,0xEF             
                                        (0118) 	M8C_SetBank0
0210: 62 0B EF MOV   REG[0xB],0xEF      (0119) 	mov	reg[0bh], efh		; Port_2_DriveMode_2 register (PRT2DM2)
0213: 62 0A 00 MOV   REG[0xA],0x0       (0120) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0216: 71 10    OR    F,0x10             
                                        (0121) 	M8C_SetBank1
0218: 62 0A 00 MOV   REG[0xA],0x0       (0122) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
021B: 62 0B 00 MOV   REG[0xB],0x0       (0123) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
021E: 70 EF    AND   F,0xEF             
                                        (0124) 	M8C_SetBank0
0220: 62 09 00 MOV   REG[0x9],0x0       (0125) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0223: 62 0C 00 MOV   REG[0xC],0x0       (0126) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0226: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
0228: 62 0C 00 MOV   REG[0xC],0x0       (0128) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
022B: 62 0D FF MOV   REG[0xD],0xFF      (0129) 	mov	reg[0dh], ffh		; Port_3_DriveMode_1 register (PRT3DM1)
022E: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
0230: 62 0F FF MOV   REG[0xF],0xFF      (0131) 	mov	reg[0fh], ffh		; Port_3_DriveMode_2 register (PRT3DM2)
0233: 62 0E 00 MOV   REG[0xE],0x0       (0132) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0236: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
0238: 62 0E 00 MOV   REG[0xE],0x0       (0134) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
023B: 62 0F 00 MOV   REG[0xF],0x0       (0135) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
023E: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
0240: 62 0D 00 MOV   REG[0xD],0x0       (0137) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0243: 62 10 00 MOV   REG[0x10],0x0      (0138) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0246: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
0248: 62 10 00 MOV   REG[0x10],0x0      (0140) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
024B: 62 11 FF MOV   REG[0x11],0xFF     (0141) 	mov	reg[11h], ffh		; Port_4_DriveMode_1 register (PRT4DM1)
024E: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
0250: 62 13 FF MOV   REG[0x13],0xFF     (0143) 	mov	reg[13h], ffh		; Port_4_DriveMode_2 register (PRT4DM2)
0253: 62 12 00 MOV   REG[0x12],0x0      (0144) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0256: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
0258: 62 12 00 MOV   REG[0x12],0x0      (0146) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
025B: 62 13 00 MOV   REG[0x13],0x0      (0147) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
025E: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
0260: 62 11 00 MOV   REG[0x11],0x0      (0149) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0263: 62 14 00 MOV   REG[0x14],0x0      (0150) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0266: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
0268: 62 14 00 MOV   REG[0x14],0x0      (0152) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
026B: 62 15 0F MOV   REG[0x15],0xF      (0153) 	mov	reg[15h], 0fh		; Port_5_DriveMode_1 register (PRT5DM1)
026E: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
0270: 62 17 0F MOV   REG[0x17],0xF      (0155) 	mov	reg[17h], 0fh		; Port_5_DriveMode_2 register (PRT5DM2)
0273: 62 16 00 MOV   REG[0x16],0x0      (0156) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0276: 71 10    OR    F,0x10             
                                        (0157) 	M8C_SetBank1
0278: 62 16 00 MOV   REG[0x16],0x0      (0158) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
027B: 62 17 00 MOV   REG[0x17],0x0      (0159) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
027E: 70 EF    AND   F,0xEF             
                                        (0160) 	M8C_SetBank0
0280: 62 15 00 MOV   REG[0x15],0x0      (0161) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0283: 70 EF    AND   F,0xEF             
                                        (0162) 	M8C_SetBank0
0285: 7F       RET                      (0163) 	ret
                                        (0164) 
                                        (0165) 
                                        (0166) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_testled4
                                        (0026) export _LoadConfig_testled4
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_1_DriveMode_0_SHADE
                                        (0030) export _Port_1_DriveMode_0_SHADE
                                        (0031) export Port_1_DriveMode_1_SHADE
                                        (0032) export _Port_1_DriveMode_1_SHADE
                                        (0033) export Port_2_Data_SHADE
                                        (0034) export _Port_2_Data_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
0286: 55 0B 00 MOV   [0xB],0x0          (0067) 	mov		[Port_1_Data_SHADE], 0h
0289: 55 0D 7F MOV   [0xD],0x7F         (0068) 	mov		[Port_1_DriveMode_0_SHADE], 7fh
028C: 55 0E 80 MOV   [0xE],0x80         (0069) 	mov		[Port_1_DriveMode_1_SHADE], 80h
028F: 55 0C 00 MOV   [0xC],0x0          (0070) 	mov		[Port_2_Data_SHADE], 0h
                                        (0071) 
0292: 7C 02 99 LCALL 0x0299             (0072) 	lcall	LoadConfig_testled4
0295: 7C 01 C1 LCALL 0x01C1             (0073) 	lcall	LoadConfigTBL_testled4_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
0298: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration testled4
                                        (0081) ;
                                        (0082) ;    Load configuration registers for testled4.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_testled4:
                                        (0099)  LoadConfig_testled4:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
0299: 10       PUSH  X                  (0102) 	push	x
029A: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
029C: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
029E: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
029F: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_testled4_Bank0
02A1: 57 5F    MOV   X,0x5F             (0108)     mov     X, <LoadConfigTBL_testled4_Bank0
02A3: 7C 02 B4 LCALL 0x02B4             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
02A6: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
02A8: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
02A9: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_testled4_Bank1
02AB: 57 98    MOV   X,0x98             (0115)     mov     X, <LoadConfigTBL_testled4_Bank1
02AD: 7C 02 B4 LCALL 0x02B4             (0116)     lcall   LoadConfig              ; Load the bank 1 values
02B0: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
02B2: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
02B3: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
02B4: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
02B6: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
02B7: 08       PUSH  A                  (0146)     push    A
02B8: 4F       MOV   X,SP               (0147)     mov     X, SP
02B9: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
02BC: D0 04    JNC   0x02C1             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02BE: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
02C1: 18       POP   A                  (0152)     pop     A
02C2: 20       POP   X                  (0153)     pop     X
02C3: 70 EF    AND   F,0xEF             
02C5: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02C8: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
02C9: 08       PUSH  A                  (0159)     push    A
02CA: 28       ROMX                     (0160)     romx                            ; Load register address from table
02CB: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
02CD: A0 1F    JZ    0x02ED             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
02CF: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
02D0: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
02D3: A0 03    JZ    0x02D7             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02D5: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
02D7: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
02D9: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
02DA: 20       POP   X                  (0170)     pop     X
02DB: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
02DC: 09 00    ADC   A,0x0              (0172)     adc     A, 0
02DE: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
02DF: 08       PUSH  A                  (0174)     push    A
02E0: 28       ROMX                     (0175)     romx                            ; load config data from the table
02E1: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
02E2: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
02E4: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
02E6: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
02E7: 20       POP   X                  (0180)     pop     X
02E8: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
02E9: 09 00    ADC   A,0x0              (0182)     adc     A, 0
02EB: 8F D7    JMP   0x02C3             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
02ED: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
02EF: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_1_DriveMode_0_SHADE:
                                        (0199) Port_1_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_1_DriveMode_1_SHADE:
                                        (0201) Port_1_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\led_bl.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_BL.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_BL.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_BL_Start
                                        (0027) export  LED_BL_Start
                                        (0028) 
                                        (0029) export _LED_BL_Stop
                                        (0030) export  LED_BL_Stop
                                        (0031) 
                                        (0032) export _LED_BL_On
                                        (0033) export  LED_BL_On
                                        (0034) 
                                        (0035) export _LED_BL_Off
                                        (0036) export  LED_BL_Off
                                        (0037) 
                                        (0038) export _LED_BL_Switch
                                        (0039) export  LED_BL_Switch
                                        (0040) 
                                        (0041) export _LED_BL_Invert
                                        (0042) export  LED_BL_Invert
                                        (0043) 
                                        (0044) export _LED_BL_GetState
                                        (0045) export  LED_BL_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_BL_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_BL_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_BL_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_BL_On:
                                        (0079)  LED_BL_On:
02F0: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
02F2: 80 03    JMP   _LED_BL_Switch     (0081)    jmp  LED_BL_Switch 
                                        (0082) 
                                        (0083) _LED_BL_Start:
                                        (0084)  LED_BL_Start:
                                        (0085) _LED_BL_Stop:
                                        (0086)  LED_BL_Stop:
                                        (0087) _LED_BL_Off:
                                        (0088)  LED_BL_Off:
02F4: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_BL_Switch:
                                        (0092)  LED_BL_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0096) 
02F6: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
02F8: A0 06    JZ    0x02FF             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
02FA: 2E 0C 10 OR    [0xC],0x10         (0102)    or   [Port_2_Data_SHADE],LED_BL_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_2_Data_SHADE],~LED_BL_PinMask
                                        (0105) ENDIF
02FD: 80 04    JMP   0x0302             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
02FF: 26 0C EF AND   [0xC],0xEF         (0110)    and  [Port_2_Data_SHADE],~LED_BL_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_2_Data_SHADE],LED_BL_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0302: 51 0C    MOV   A,[0xC]            (0116)    mov  A,[Port_2_Data_SHADE]
0304: 60 08    MOV   REG[0x8],A         (0117)    mov  reg[LED_BL_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0306: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_BL_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_BL_Invert:
                                        (0144)  LED_BL_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0148) 
0307: 36 0C 10 XOR   [0xC],0x10         (0149)    xor  [Port_2_Data_SHADE],LED_BL_PinMask
030A: 51 0C    MOV   A,[0xC]            (0150)    mov  A,[Port_2_Data_SHADE]
030C: 60 08    MOV   REG[0x8],A         (0151)    mov  reg[LED_BL_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
030E: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_BL_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_BL_GetState:
                                        (0177)  LED_BL_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_2_Data_SHADE
                                        (0181) 
030F: 51 0C    MOV   A,[0xC]            (0182)    mov   A,[Port_2_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0311: 21 10    AND   A,0x10             (0188)    and   A,LED_BL_PinMask              ; Mask off the trash
0313: A0 03    JZ    0x0317             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0315: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0317: 7F       RET                      (0195)    ret
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT1DR
                                        (0135) LCD_1_PortMode0:      equ    PRT1DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT1DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0318: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0319: 10       PUSH  X                  (0209)     push  X
031A: 28       ROMX                     (0210)     romx                               ; Get character from ROM
031B: B0 04    JNZ   0x0320             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
031D: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
031E: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
031F: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0320: 90 3C    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0218)     call  LCD_1_WriteData              ; Write data to LCD
0322: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0323: 18       POP   A                  (0220)     pop   A
0324: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0325: DF F2    JNC   _LCD_1_PrCString   (0222)     jnc   .Loop_PrCString
0327: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0328: 8F EF    JMP   _LCD_1_PrCString   (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
033A: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
033B: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
033C: 67       ASR   A                  (0262)     asr   A
033D: 67       ASR   A                  (0263)     asr   A
033E: 67       ASR   A                  (0264)     asr   A
033F: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0341: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
0343: 90 19    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0267)     call  LCD_1_WriteData              ; Write data to screen
0345: 18       POP   A                  (0268)     pop   A                            ; Restore value
0346: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0348: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
034A: 90 12    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
034C: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
034D: 4B       SWAP  A,X                (0305)     swap  A,X
034E: 9F EA    CALL  _LCD_1_PrHexByte   (0306)     call  LCD_1_PrHexByte              ; Print MSB
0350: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0351: 9F E7    CALL  _LCD_1_PrHexByte   (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0353: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0354: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0356: A0 06    JZ    0x035D             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
0358: 90 04    CALL  _LCD_1_WriteData|LCD_1_Write_Data|_LCD_1_Write_Data(0349)     call  LCD_1_WriteData              ; Write data to screen
035A: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
035B: 8F F8    JMP   _LCD_1_PrString    (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
035D: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
035E: 90 5F    CALL  0x03BF             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
0360: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0361: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0362: 67       ASR   A                  (0390)     asr   A
0363: 67       ASR   A                  (0391)     asr   A
0364: 67       ASR   A                  (0392)     asr   A
0365: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0367: 90 38    CALL  0x03A1             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
0369: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
036A: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
036C: 40       NOP                      (0397)     nop
036D: 40       NOP                      (0398)     nop
036E: 40       NOP                      (0399)     nop
036F: 90 30    CALL  0x03A1             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0371: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0372: 90 4B    CALL  0x03BF             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
0374: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0375: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0376: 67       ASR   A                  (0436)     asr   A
0377: 67       ASR   A                  (0437)     asr   A
0378: 67       ASR   A                  (0438)     asr   A
0379: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
037B: 90 09    CALL  0x0386             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
037D: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
037E: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0380: 40       NOP                      (0443)     nop
0381: 40       NOP                      (0444)     nop
0382: 40       NOP                      (0445)     nop
0383: 90 01    CALL  0x0386             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0385: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0386: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_1_Data_SHADE           ; Set CUR_PP to LCD variable address
0387: 26 0B 80 AND   [0xB],0x80         (0479)     and   [Port_1_Data_SHADE],~LCD_1_PORT_MASK
038A: 51 0B    MOV   A,[0xB]            (0480)     mov   A,[Port_1_Data_SHADE]
038C: 60 04    MOV   REG[0x4],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
038E: 18       POP   A                  (0483)     pop   A
038F: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
0391: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
0393: 2A 0B    OR    A,[0xB]            (0486)     or    A,[Port_1_Data_SHADE]                  ; OR in bit 7 just
0395: 60 04    MOV   REG[0x4],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
0397: 53 0B    MOV   [0xB],A            (0488)     mov   [Port_1_Data_SHADE],A                  ; Keep shadow register in sync
0399: 40       NOP                      (0489)     nop
039A: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
039C: 53 0B    MOV   [0xB],A            (0491)     mov   [Port_1_Data_SHADE],A                  ; Keep shadow register in sync
039E: 60 04    MOV   REG[0x4],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
03A0: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
03A1: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_1_Data_SHADE          ; Set CUR_PP to LCD variable address
03A2: 26 0B 80 AND   [0xB],0x80         (0525)     and   [Port_1_Data_SHADE],~LCD_1_PORT_MASK
03A5: 2E 0B 20 OR    [0xB],0x20         (0526)     or    [Port_1_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
03A8: 51 0B    MOV   A,[0xB]            (0527)     mov   A,[Port_1_Data_SHADE]
03AA: 60 04    MOV   REG[0x4],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
03AC: 18       POP   A                  (0530)     pop   A
03AD: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
03AF: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
03B1: 2A 0B    OR    A,[0xB]            (0533)     or    A,[Port_1_Data_SHADE]                       ; Keep shadow in sync
03B3: 60 04    MOV   REG[0x4],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
03B5: 53 0B    MOV   [0xB],A            (0535)     mov   [Port_1_Data_SHADE],A                       ; Keep shadow in sync
03B7: 40       NOP                      (0536)     NOP
03B8: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
03BA: 53 0B    MOV   [0xB],A            (0538)     mov   [Port_1_Data_SHADE],A                       ; keep shadow in sync
03BC: 60 04    MOV   REG[0x4],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
03BE: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
03BF: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_1_Data_SHADE                ; Set CUR_PP to LCD variable address
03C0: 26 0B 80 AND   [0xB],0x80         (0573)     and   [Port_1_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
03C3: 51 0B    MOV   A,[0xB]            (0574)     mov   A,[Port_1_Data_SHADE]
03C5: 60 04    MOV   REG[0x4],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
03C7: 26 0D F0 AND   [0xD],0xF0         (0577)     and   [Port_1_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
03CA: 51 0D    MOV   A,[0xD]            (0578)     mov   A,[Port_1_DriveMode_0_SHADE]
03CC: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
03CE: 60 04    MOV   REG[0x4],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
03D0: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
03D2: 2E 0B 40 OR    [0xB],0x40         (0583)     or    [Port_1_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
03D5: 51 0B    MOV   A,[0xB]            (0584)     mov   A,[Port_1_Data_SHADE]
03D7: 60 04    MOV   REG[0x4],A         (0585)     mov   reg[LCD_1_Port],A
03D9: 40       NOP                      (0586)     NOP
                                        (0587) 
03DA: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
03DB: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
03DD: 2E 0B 50 OR    [0xB],0x50         (0592)     or    [Port_1_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
03E0: 51 0B    MOV   A,[0xB]            (0593)     mov   A,[Port_1_Data_SHADE]
03E2: 60 04    MOV   REG[0x4],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
03E4: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
03E5: 40       NOP                      (0597)     nop
03E6: 5D 04    MOV   A,REG[0x4]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
03E8: 08       PUSH  A                  (0610)     push  A
03E9: 26 0B C0 AND   [0xB],0xC0         (0611)     and   [Port_1_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
03EC: 51 0B    MOV   A,[0xB]            (0612)     mov   A,[Port_1_Data_SHADE]
03EE: 60 04    MOV   REG[0x4],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
03F0: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
03F1: 40       NOP                      (0616)     nop                                    ; fastest PSoC
03F2: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
03F3: 2E 0B 50 OR    [0xB],0x50         (0619)     or    [Port_1_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
03F6: 51 0B    MOV   A,[0xB]            (0620)     mov   A,[Port_1_Data_SHADE]
03F8: 60 04    MOV   REG[0x4],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
03FA: 40       NOP                      (0623)     nop
03FB: 40       NOP                      (0624)     nop
                                        (0625) 
03FC: 26 0B C0 AND   [0xB],0xC0         (0626)     and   [Port_1_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
03FF: 51 0B    MOV   A,[0xB]            (0627)     mov   A,[Port_1_Data_SHADE]
0401: 60 04    MOV   REG[0x4],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
0403: 18       POP   A                  (0630)     pop   A
0404: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
0406: A0 04    JZ    0x040B             (0633)     jz    .UNLOCK
0408: 79       DEC   X                  (0634)     dec   X
0409: BF D3    JNZ   0x03DD             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
040B: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
040C: 2E 0D 7F OR    [0xD],0x7F         (0639)     or    [Port_1_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
040F: 51 0D    MOV   A,[0xD]            (0640)     mov   A,[Port_1_DriveMode_0_SHADE]
0411: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0413: 60 04    MOV   REG[0x4],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
0415: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0417: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0418: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_1_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0419: 26 0D 80 AND   [0xD],0x80         (0685)     and   [Port_1_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
041C: 2E 0D 7F OR    [0xD],0x7F         (0686)     or    [Port_1_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
041F: 26 0E 80 AND   [0xE],0x80         (0687)     and   [Port_1_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
0422: 51 0D    MOV   A,[0xD]            (0689)     mov   A,[Port_1_DriveMode_0_SHADE]
0424: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0426: 60 04    MOV   REG[0x4],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
0428: 51 0E    MOV   A,[0xE]            (0692)     mov   A,[Port_1_DriveMode_1_SHADE]
042A: 60 05    MOV   REG[0x5],A         (0693)     mov   reg[LCD_1_PortMode1],A
042C: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
042E: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0430: 90 63    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
0432: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0434: 90 5F    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
0436: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0438: 9F 4C    CALL  0x0386             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
043A: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
043C: 90 57    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
043E: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0440: 9F 44    CALL  0x0386             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
0442: 90 5F    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
0444: 90 5D    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
0446: 90 5B    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
0448: 50 03    MOV   A,0x3              (0714)     mov   A,03h
044A: 9F 3A    CALL  0x0386             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
044C: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
044E: 90 45    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
0450: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0452: 9F 32    CALL  0x0386             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
0454: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0456: 90 3D    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
0458: 50 08    MOV   A,0x8              (0726)     mov   A,08h
045A: 9F 16    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
045C: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
045E: 90 35    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
0460: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0462: 9F 0E    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
0464: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0466: 90 2D    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
0468: 50 06    MOV   A,0x6              (0736)     mov   A,06h
046A: 9F 06    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
046C: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
046E: 9F 02    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
0470: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0472: 9E FE    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
0474: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
0476: 9E FA    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
0478: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
047A: 9E F6    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
047C: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
047E: 9E F2    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
0480: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0482: 90 11    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0484: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0489: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
048B: 10       PUSH  X                  (0791)     push  X                            ; Store COL
048C: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
048E: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
048F: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0491: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0492: 9E DE    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0494: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0495: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
0497: 78       DEC   A                  (0828)     dec   A
0498: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
049A: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
04A3: 08       PUSH  A                  (0871)     push  A
04A4: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
04A6: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
04A8: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
04AA: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
04AC: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
04AE: D0 06    JNC   0x04B5             (0877)     jnc   .Delay50u_End
04B0: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
04B2: 78       DEC   A                  (0880)     dec   A                              ; [4]
04B3: BF FE    JNZ   0x04B2             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
04B5: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
04B6: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_1_Position               ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_1_Control                ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_1_WriteData              ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_1_Control                ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_1_WriteData              ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_1_Control                ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_1_WriteData              ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_1_Control                 ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_1_Control                ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_1_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_1_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_1_DISP_ON
                                        (1347)     call  LCD_1_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\delsig11_1int.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DELSIG11_1INT.asm
                                        (0004) ;;   Version: 3.2, Updated on 2015/3/4 at 22:25:33
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler interrupt service routine for the 11-bit Delta-
                                        (0008) ;;               Sigma A/D Converter User Module. This code works for both
                                        (0009) ;;               the first and second-order modulator topologies.
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) include "DELSIG11_1.inc"
                                        (0018) 
                                        (0019) 
                                        (0020) ;-----------------------------------------------
                                        (0021) ;  Global Symbols
                                        (0022) ;-----------------------------------------------
                                        (0023) 
                                        (0024) export _DELSIG11_1_ADConversion_ISR
                                        (0025) export  DELSIG11_1_fState
                                        (0026) 
                                        (0027) IF (DELSIG11_1_POLL_ENABLE)
                                        (0028) export _DELSIG11_1_iResult
                                        (0029) export  DELSIG11_1_iResult
                                        (0030) export _DELSIG11_1_bfStatus
                                        (0031) export  DELSIG11_1_bfStatus
                                        (0032) ENDIF
                                        (0033) 
                                        (0034) 
                                        (0035) ;-----------------------------------------------
                                        (0036) ; Variable Allocation
                                        (0037) ;-----------------------------------------------
                                        (0038) AREA InterruptRAM (RAM, REL, CON)
                                        (0039) 
                                        (0040) iOut:    BLK  2  ; Decimate by 7 bit answer
                                        (0041) iTmp2:   BLK  2  ; z^-2
                                        (0042) iTmp1:   BLK  2  ; z^-1
                                        (0043) iAns:    BLK  2  ; Final answer calculated from  iOut + 2iOut(-1) + iOut(-2)
                                        (0044) 
                                        (0045) DELSIG11_1_fState: BLK 1   ; Current state
                                        (0046) 
                                        (0047) IF (DELSIG11_1_POLL_ENABLE)
                                        (0048) _DELSIG11_1_iResult:
                                        (0049)  DELSIG11_1_iResult:       BLK   2  ;A/D value
                                        (0050) _DELSIG11_1_bfStatus:
                                        (0051)  DELSIG11_1_bfStatus:      BLK   1  ;Data Valid Flag
                                        (0052) ENDIF
                                        (0053) 
                                        (0054) 
                                        (0055) ;-----------------------------------------------
                                        (0056) ;  Private Symbols
                                        (0057) ;-----------------------------------------------
                                        (0058) MSB:                   equ  0
                                        (0059) LSB:                   equ  1
                                        (0060) 
                                        (0061) 
                                        (0062) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0063) ;---------------------------------------------------
                                        (0064) ; Insert your custom declarations below this banner
                                        (0065) ;---------------------------------------------------
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Includes
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 	
                                        (0072) ;------------------------
                                        (0073) ;  Constant Definitions
                                        (0074) ;------------------------
                                        (0075) 
                                        (0076) 
                                        (0077) ;------------------------
                                        (0078) ; Variable Allocation
                                        (0079) ;------------------------
                                        (0080) 
                                        (0081) 
                                        (0082) ;---------------------------------------------------
                                        (0083) ; Insert your custom declarations above this banner
                                        (0084) ;---------------------------------------------------
                                        (0085) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0086) 
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) 
                                        (0090) ;;-----------------------------------------------------------------------------
                                        (0091) ;;  FUNCTION NAME: _DELSIG11_1_ADConversion_ISR:
                                        (0092) ;;
                                        (0093) ;;  DESCRIPTION:   Implements a state machine that takes data from the hardware
                                        (0094) ;;                 decimator and completes the calculation of a sinc^2 filter
                                        (0095) ;;                 to produce an 11-bit result.
                                        (0096) ;;-----------------------------------------------------------------------------
                                        (0097) ;;  
                                        (0098) ;;  state 1   calculate first half of iOut
                                        (0099) ;;  state 2   calculate rest of iOut, calculate middle of iAns
                                        (0100) ;;  state 3   calculate first half of iOut
                                        (0101) ;;  state 4   calculate rest of iOut, calculate rest of iAns and
                                        (0102) ;;              start of new iAns get this data.
                                        (0103) 
                                        (0104) _DELSIG11_1_ADConversion_ISR:
04B7: 76 17    INC   [0x17]             (0105)    inc   [DELSIG11_1_fState]           ; Advance to next state
04B9: 47 17 01 TST   [0x17],0x1         (0106)    tst   [DELSIG11_1_fState], 01h
04BC: A0 0E    JZ    0x04CB             (0107)    jz    .State2_State4_Entry
                                        (0108) 
                                        (0109)    ; State 1 or State 3: calculate half of iOut
                                        (0110)                      ;  Variables:       Out              Tmp2     Tmp1   Deci
                                        (0111)                      ;  Initial state:   (x3-x2)-(x2-x1)  (x2-x1)  x1     x0
                                        (0112) 
                                        (0113)                                        ; Out = Tmp2
04BE: 5F 10 12 MOV   [0x10],[0x12]      (0114)    mov   [iOut+LSB], [iTmp2+LSB]       ; Out              Tmp2     Tmp1   Deci
04C1: 5F 0F 11 MOV   [0xF],[0x11]       (0115)    mov   [iOut+MSB], [iTmp2+MSB]       ; (x2-x1)          (x2-x1)  x1     x0
                                        (0116) 
                                        (0117)                                        ; Tmp2 = Tmp1
04C4: 5F 12 14 MOV   [0x12],[0x14]      (0118)    mov   [iTmp2+LSB], [iTmp1+LSB]      ; Out              Tmp2     Tmp1   Deci
04C7: 5F 11 13 MOV   [0x11],[0x13]      (0119)    mov   [iTmp2+MSB], [iTmp1+MSB]      ; (x2-x1)          x1       x1     x0
04CA: 7E       RETI                     (0120)    reti                                ; End of State 1 & State 3 process
                                        (0121) 
                                        (0122) 
                                        (0123) .State2_State4_Entry:
04CB: 08       PUSH  A                  (0124)    push  A           ;  Variables:       Out              Tmp2     Tmp1   Deci
                                        (0125)                      ;  Initial state:   (x3-x2)-(x2-x1)  (x2-x1)  x1     x0
                                        (0126) 
04CC: 5D E5    MOV   A,REG[0xE5]        (0127)    mov   A, reg[DEC_DL]                ;
04CE: 53 14    MOV   [0x14],A           (0128)    mov   [iTmp1+LSB], A                ; Tmp1  = Deci
04D0: 14 12    SUB   [0x12],A           (0129)    sub   [iTmp2+LSB], A                ; Tmp2 -= Deci
04D2: 5D E4    MOV   A,REG[0xE4]        (0130)    mov   A, reg[DEC_DH]                ;
04D4: 53 13    MOV   [0x13],A           (0131)    mov   [iTmp1+MSB], A                ; Out              Tmp2     Tmp1   Deci
04D6: 1C 11    SBB   [0x11],A           (0132)    sbb   [iTmp2+MSB], A                ; (x2-x1)          x1-x0    x0     x0
                                        (0133) 
04D8: 51 12    MOV   A,[0x12]           (0134)    mov   A, [iTmp2+LSB]                ; --> Subtract Tmp2 from iOut:
04DA: 14 10    SUB   [0x10],A           (0135)    sub   [iOut+LSB], A                 ;
04DC: 51 11    MOV   A,[0x11]           (0136)    mov   A, [iTmp2+MSB]                ; Out              Tmp2     Tmp1   Deci
04DE: 1C 0F    SBB   [0xF],A            (0137)    sbb   [iOut+MSB], A                 ; (x2-x1)-(x1-x0)  x1-x0    x0     x0
                                        (0138) 
04E0: 47 17 04 TST   [0x17],0x4         (0139)    tst [DELSIG11_1_fState], 04h
04E3: B0 0B    JNZ   0x04EF             (0140)    jnz .State4_Continuation
                                        (0141) 
                                        (0142)    ; State 2: calculate the 'middle' of iAns
                                        (0143)    ;
04E5: 51 10    MOV   A,[0x10]           (0144)    mov   A, [iOut+LSB]
04E7: 04 16    ADD   [0x16],A           (0145)    add   [iAns+LSB], A
04E9: 51 0F    MOV   A,[0xF]            (0146)    mov   A, [iOut+MSB]
04EB: 0C 15    ADC   [0x15],A           (0147)    adc   [iAns+MSB], A
04ED: 18       POP   A                  (0148)    pop   A
04EE: 7E       RETI                     (0149)    reti
                                        (0150) 
                                        (0151)    ; State4: calculate rest of iOut, calculate rest of iAns
                                        (0152)    ;
                                        (0153) .State4_Continuation:
04EF: 55 17 00 MOV   [0x17],0x0         (0154)    mov   [DELSIG11_1_fState], 0  ; Reset state machine for next cycle
04F2: 10       PUSH  X                  (0155)    push  X
                                        (0156) 
04F3: 68 0F    ASR   [0xF]              (0157)    asr   [iOut+MSB]                    ; iOut is always an even value, so divide
04F5: 6E 10    RRC   [0x10]             (0158)    rrc   [iOut+LSB]                    ;   by two to allow an extra bit of range
                                        (0159) 
04F7: 51 10    MOV   A,[0x10]           (0160)    mov A, [iOut+LSB]
04F9: 04 16    ADD   [0x16],A           (0161)    add [iAns+LSB], A
04FB: 51 0F    MOV   A,[0xF]            (0162)    mov A, [iOut+MSB]
04FD: 0C 15    ADC   [0x15],A           (0163)    adc [iAns+MSB], A
                                        (0164) 
                                        (0165) IF DELSIG11_1_LEFTJUSTIFIED
                                        (0166)    jc  .LessThanFullScale              ;
                                        (0167)    cmp [iAns+MSB], 80h                 ; Is the value less than full scale?
                                        (0168)    jnz .LessThanFullScale              ;    Yes, go set it up
                                        (0169)    mov X, 7fh                          ;     No, Limit the value to plus full-scale
                                        (0170)    mov A, ffh                          ;         range
                                        (0171)    jmp   .ConversionReady
                                        (0172) 
                                        (0173) .LessThanFullScale:
                                        (0174)    mov X, [iAns+MSB]                   ; Final result in [X,A]
                                        (0175)    mov A, [iAns+LSB]                   ; Fall through to .ConversionReady
                                        (0176) ENDIF
                                        (0177) 
                                        (0178) IF DELSIG11_1_RIGHTJUSTIFIED
04FF: C0 0C    JC    0x050C             (0179)    jc    .LessThanFullScale            ;
0501: 3C 15 80 CMP   [0x15],0x80        (0180)    cmp   [iAns+MSB], 80h               ; Is the value less than full scale?
0504: B0 07    JNZ   0x050C             (0181)    jnz   .LessThanFullScale            ;    Yes, go set it up
0506: 57 03    MOV   X,0x3              (0182)    mov   X, 03h                        ;     No, Limit the value to plus full-scale
0508: 50 FF    MOV   A,0xFF             (0183)    mov   A, ffh                        ;         range
050A: 80 14    JMP   0x051F             (0184)    jmp   .ConversionReady
                                        (0185) 
                                        (0186) .LessThanFullScale:
050C: 51 16    MOV   A,[0x16]           (0187)    mov   A, [iAns+LSB]                 ; set up and shift the data...
050E: 68 15    ASR   [0x15]             (0188)    asr   [iAns+MSB]
0510: 6D       RRC   A                  (0189)    rrc   A
0511: 68 15    ASR   [0x15]             (0190)    asr   [iAns+MSB]
0513: 6D       RRC   A                  (0191)    rrc   A
0514: 68 15    ASR   [0x15]             (0192)    asr   [iAns+MSB]
0516: 6D       RRC   A                  (0193)    rrc   A
0517: 68 15    ASR   [0x15]             (0194)    asr   [iAns+MSB]
0519: 6D       RRC   A                  (0195)    rrc   A
051A: 68 15    ASR   [0x15]             (0196)    asr   [iAns+MSB]
051C: 6D       RRC   A                  (0197)    rrc   A
051D: 58 15    MOV   X,[0x15]           (0198)    mov   X, [iAns+MSB]
                                        (0199) ENDIF
                                        (0200) 
                                        (0201) .ConversionReady:
                                        (0202) 
                                        (0203)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0204)    ;---------------------------------------------------
                                        (0205)    ; Insert your custom code below this banner
                                        (0206)    ;---------------------------------------------------
                                        (0207)    ;  data is now in X, A
                                        (0208)    ;  This interrupt service routine has already
                                        (0209)    ;  preserved the values of the A and X CPU registers
                                        (0210)    ;  and will restore them before returning control...
                                        (0211) 
                                        (0212) IF (DELSIG11_1_POLL_ENABLE)
051F: 53 19    MOV   [0x19],A           (0213)     mov [DELSIG11_1_iResult+LSB], A              ; Save result in iResult
0521: 5A 18    MOV   [0x18],X           (0214)     mov [DELSIG11_1_iResult+MSB], X
0523: 55 1A 10 MOV   [0x1A],0x10        (0215)     mov [DELSIG11_1_bfStatus], DELSIG11_1_DATA_READY_BIT; Set valid data flag
                                        (0216) ENDIF
                                        (0217) 
                                        (0218) 
                                        (0219)    ;---------------------------------------------------
                                        (0220)    ; Insert your custom code above this banner
                                        (0221)    ;---------------------------------------------------
                                        (0222)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0223) 
0526: 5F 16 10 MOV   [0x16],[0x10]      (0224)    mov [iAns+LSB], [iOut+LSB]         ;start next answer
0529: 5F 15 0F MOV   [0x15],[0xF]       (0225)    mov [iAns+MSB], [iOut+MSB]
052C: 20       POP   X                  (0226)    pop X
052D: 18       POP   A                  (0227)    pop A
052E: 7E       RETI                     (0228)    reti
                                        (0229) 
                                        (0230) ; end of file DELSIG11_1INT.asm
FILE: lib\delsig11_1.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DELSIG11_1.asm
                                        (0004) ;;   Version: 3.2, Updated on 2015/3/4 at 22:25:33
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the 11-bit Delta-Sigma A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"                ; see this for RAM use & proxy classes
                                        (0025) include "DELSIG11_1.inc"
                                        (0026) 
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ;  Global Symbols
                                        (0030) ;-----------------------------------------------
                                        (0031) export  DELSIG11_1_Start
                                        (0032) export _DELSIG11_1_Start
                                        (0033) export  DELSIG11_1_SetPower
                                        (0034) export _DELSIG11_1_SetPower
                                        (0035) export  DELSIG11_1_Stop
                                        (0036) export _DELSIG11_1_Stop
                                        (0037) export  DELSIG11_1_StartAD
                                        (0038) export _DELSIG11_1_StartAD
                                        (0039) export  DELSIG11_1_StopAD
                                        (0040) export _DELSIG11_1_StopAD
                                        (0041) 
                                        (0042) IF (DELSIG11_1_POLL_ENABLE)
                                        (0043) export  DELSIG11_1_fIsDataAvailable
                                        (0044) export _DELSIG11_1_fIsDataAvailable
                                        (0045) export  DELSIG11_1_iGetDataClearFlag
                                        (0046) export _DELSIG11_1_iGetDataClearFlag
                                        (0047) export  DELSIG11_1_iGetData
                                        (0048) export _DELSIG11_1_iGetData
                                        (0049) export  DELSIG11_1_ClearFlag
                                        (0050) export _DELSIG11_1_ClearFlag
                                        (0051) ENDIF
                                        (0052) 
                                        (0053) 
                                        (0054) ;-----------------------------------------------
                                        (0055) ;  Constant Definitions
                                        (0056) ;-----------------------------------------------
                                        (0057) 
                                        (0058) CONTROL_REG_ENABLE_BIT:                    equ  01h     ; Control register start bit
                                        (0059) POWERMASK:                                 equ  03h     ; Analog PSoC Block Power bits
                                        (0060) NOAZ:                                      equ  1       ;
                                        (0061) SC_AZ_MASK:                                equ  20h     ; Switched Cap Auto Zero bit
                                        (0062) SC_FSW0_MASK:                              equ  10h     ; Switched Cap Feedback '0' switch
                                        (0063) 
                                        (0064) 
                                        (0065) AREA UserModules (ROM, REL)
                                        (0066) 
                                        (0067) .SECTION
                                        (0068) ;-----------------------------------------------------------------------------
                                        (0069) ;  FUNCTION NAME: DELSIG11_1_Start
                                        (0070) ;  FUNCTION NAME: DELSIG11_1_SetPower
                                        (0071) ;
                                        (0072) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0073) ;-----------------------------------------------------------------------------
                                        (0074) ;
                                        (0075) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0076) ;  RETURNS:      Nothing.
                                        (0077) ;  SIDE EFFECTS: 
                                        (0078) ;    The A and X registers may be modified by this or future implementations
                                        (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0082) ;    functions.
                                        (0083) ;
                                        (0084)  DELSIG11_1_Start:
                                        (0085) _DELSIG11_1_Start:
                                        (0086)  DELSIG11_1_SetPower:
                                        (0087) _DELSIG11_1_SetPower:
                                        (0088)    RAM_PROLOGUE   RAM_USE_CLASS_2
052F: 4F       MOV   X,SP               (0089)    mov  X, SP                                    ; Set up Stack frame
0530: 21 03    AND   A,0x3              (0090)    and  A, POWERMASK                             ; Ensure value is legal
0532: 08       PUSH  A                  (0091)    push A
0533: 5D 83    MOV   A,REG[0x83]        (0092)    mov  A, reg[DELSIG11_1_AtoDcr3]               ; First SC block:
0535: 21 FC    AND   A,0xFC             (0093)    and  A, ~POWERMASK                            ;   clear power bits to zero
0537: 2B 00    OR    A,[X+0]            (0094)    or   A, [ X ]                                 ;   establish new value
0539: 60 83    MOV   REG[0x83],A        (0095)    mov  reg[DELSIG11_1_AtoDcr3], A               ;   change the actual setting
053B: 18       POP   A                  (0096)    pop  A
                                        (0097)    RAM_EPILOGUE  RAM_USE_CLASS_2
053C: 7F       RET                      (0098)    ret
                                        (0099) .ENDSECTION
                                        (0100) 
                                        (0101) 
                                        (0102) .SECTION
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;  FUNCTION NAME: DELSIG11_1_Stop
                                        (0105) ;
                                        (0106) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:     None.
                                        (0110) ;  RETURNS:       Nothing.
                                        (0111) ;  SIDE EFFECTS: 
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  DELSIG11_1_Stop:
                                        (0119) _DELSIG11_1_Stop:
                                        (0120)    RAM_PROLOGUE   RAM_USE_CLASS_1
053D: 41 83 FC AND   REG[0x83],0xFC     (0121)    and  reg[DELSIG11_1_AtoDcr3], ~POWERMASK
                                        (0122)    RAM_EPILOGUE  RAM_USE_CLASS_1
0540: 7F       RET                      (0123)    ret
0541: 71 10    OR    F,0x10             
                                        (0124) .ENDSECTION
                                        (0125) 
                                        (0126) 
                                        (0127) .SECTION
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  FUNCTION NAME: DELSIG11_1_StartAD
                                        (0130) ;
                                        (0131) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0132) ;-----------------------------------------------------------------------------
                                        (0133) ;
                                        (0134) ;  ARGUMENTS:    None.
                                        (0135) ;  RETURNS:      Nothing.
                                        (0136) ;  SIDE EFFECTS: 
                                        (0137) ;    The A and X registers may be modified by this or future implementations
                                        (0138) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0139) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0140) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0141) ;    functions.
                                        (0142) ;          
                                        (0143) ;    Currently only the page pointer registers listed below are modified:
                                        (0144) ;       CUR_PP
                                        (0145) ;
                                        (0146)  DELSIG11_1_StartAD:
                                        (0147) _DELSIG11_1_StartAD:
                                        (0148)    RAM_PROLOGUE   RAM_USE_CLASS_4
                                        (0149)    RAM_SETPAGE_CUR >DELSIG11_1_fState
                                        (0150) 
                                        (0151)    M8C_SetBank1
0543: 41 E7 3F AND   REG[0xE7],0x3F     (0152)    and reg[E7h], 3Fh             ; if we are in 29xxx then this sets decimator to comp mode   
0546: 70 EF    AND   F,0xEF             
                                        (0153)    M8C_SetBank0
                                        (0154) 
0548: 55 17 00 MOV   [0x17],0x0         (0155)    mov [DELSIG11_1_fState], 0                        ; Reset state machine
054B: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0156)    M8C_EnableIntMask DELSIG11_1_INT_REG, DELSIG11_1_INT_MASK          ; Enable timer interrupt
054E: 41 83 EF AND   REG[0x83],0xEF     (0157)    and  reg[DELSIG11_1_AtoDcr3], ~SC_FSW0_MASK       ; Enable the Integrator ...
                                        (0158) 
                                        (0159) IF NOAZ
0551: 41 82 DF AND   REG[0x82],0xDF     (0160)    and  reg[DELSIG11_1_AtoDcr2], ~SC_AZ_MASK         ; Turn off AutoZero
                                        (0161) ENDIF
                                        (0162)                                                      ; Initialize Timer ...
0554: 62 21 FF MOV   REG[0x21],0xFF     (0163)    mov  reg[DELSIG11_1_TimerDR1], FFh                ;   set period = 256
0557: 62 23 01 MOV   REG[0x23],0x1      (0164)    mov  reg[DELSIG11_1_TimerCR0], CONTROL_REG_ENABLE_BIT
                                        (0165)    RAM_EPILOGUE  RAM_USE_CLASS_4
055A: 7F       RET                      (0166)    ret
055B: 71 10    OR    F,0x10             
                                        (0167) .ENDSECTION
                                        (0168) 
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: DELSIG11_1_StopAD
                                        (0173) ;
                                        (0174) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The Timer stops
                                        (0175) ;               operating and it's interrupt is disabled. Analog power is
                                        (0176) ;               still supplied to the analog block, however.
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:    None.
                                        (0180) ;  RETURNS:      Nothing.
                                        (0181) ;  SIDE EFFECTS: 
                                        (0182) ;    The A and X registers may be modified by this or future implementations
                                        (0183) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0184) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0185) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0186) ;    functions.
                                        (0187) ;
                                        (0188)  DELSIG11_1_StopAD:
                                        (0189) _DELSIG11_1_StopAD:
                                        (0190)    RAM_PROLOGUE   RAM_USE_CLASS_1
                                        (0191) 
                                        (0192)    M8C_SetBank1
055D: 43 E7 80 OR    REG[0xE7],0x80     (0193)    or  reg[E7h], 80h             ; if we are in 29xxx then this sets decimator to full alg. mode   
0560: 70 EF    AND   F,0xEF             
                                        (0194)    M8C_SetBank0
                                        (0195) 
0562: 62 23 00 MOV   REG[0x23],0x0      (0196)    mov  reg[DELSIG11_1_TimerCR0], 00h                ; Disable the Timer
0565: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0197)    M8C_DisableIntMask DELSIG11_1_INT_REG, DELSIG11_1_INT_MASK         ; Disable its interrupt
                                        (0198) IF NOAZ
0568: 43 82 20 OR    REG[0x82],0x20     (0199)    or   reg[DELSIG11_1_AtoDcr2], SC_AZ_MASK          ; Force the Integrator into reset
                                        (0200) ENDIF
056B: 43 83 10 OR    REG[0x83],0x10     (0201)    or   reg[DELSIG11_1_AtoDcr3], SC_FSW0_MASK        ; Reset Integrator
                                        (0202)    RAM_EPILOGUE  RAM_USE_CLASS_1
056E: 7F       RET                      (0203)    ret
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) 
                                        (0207) IF (DELSIG11_1_POLL_ENABLE)
                                        (0208) 
                                        (0209) .SECTION
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;  FUNCTION NAME: DELSIG11_1_fIsDataAvailable
                                        (0212) ;
                                        (0213) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;  ARGUMENTS:    None.
                                        (0216) ;  RETURNS:      fastcall16 BOOL DataAvailable returned in the A register
                                        (0217) ;  SIDE EFFECTS:
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;          
                                        (0224) ;    Currently only the page pointer registers listed below are modified:
                                        (0225) ;          CUR_PP
                                        (0226) ;
                                        (0227)  DELSIG11_1_fIsDataAvailable:
                                        (0228) _DELSIG11_1_fIsDataAvailable:
                                        (0229)    RAM_PROLOGUE   RAM_USE_CLASS_4
                                        (0230)    RAM_SETPAGE_CUR >DELSIG11_1_bfStatus
056F: 51 1A    MOV   A,[0x1A]           (0231)    mov  A, [DELSIG11_1_bfStatus]
                                        (0232)    RAM_EPILOGUE  RAM_USE_CLASS_4
0571: 7F       RET                      (0233)    ret
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) 
                                        (0237) .SECTION
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;  FUNCTION NAME:  DELSIG11_1_iGetDataClearFlag
                                        (0240) ;
                                        (0241) ;  DESCRIPTION:    Returns the data from the A/D.  Does not check if data is
                                        (0242) ;                  available. Also clears the DATA_READY flag.
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  ARGUMENTS:    None.
                                        (0245) ;  RETURNS:      fastcall16 INT iData (LSB in A, MSB in X)
                                        (0246) ;  SIDE EFFECTS:
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;          
                                        (0253) ;    Currently only the page pointer registers listed below are modified:
                                        (0254) ;          CUR_PP
                                        (0255) ;
                                        (0256) ;    Timer interrupts are momentarily halted and restarted to
                                        (0257) ;    ensure data integrity.
                                        (0258) ;
                                        (0259)  DELSIG11_1_iGetDataClearFlag:
                                        (0260) _DELSIG11_1_iGetDataClearFlag:
                                        (0261)    RAM_PROLOGUE   RAM_USE_CLASS_4
                                        (0262)    RAM_SETPAGE_CUR >DELSIG11_1_bfStatus
0572: 26 1A EF AND   [0x1A],0xEF        (0263)    and  [DELSIG11_1_bfStatus], ~DELSIG11_1_DATA_READY_BIT
0575: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0264)    M8C_DisableIntMask DELSIG11_1_INT_REG, DELSIG11_1_INT_MASK         ; Disable its interrupt
0578: 58 18    MOV   X,[0x18]           (0265)    mov  X, [DELSIG11_1_iResult + HIGHBYTE]
057A: 51 19    MOV   A,[0x19]           (0266)    mov  A, [DELSIG11_1_iResult + LOWBYTE]
057C: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0267)    M8C_EnableIntMask DELSIG11_1_INT_REG, DELSIG11_1_INT_MASK          ; Enable timer interrupt
                                        (0268)    RAM_EPILOGUE  RAM_USE_CLASS_4
057F: 7F       RET                      (0269)    ret
0580: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0270) .ENDSECTION
                                        (0271) 
                                        (0272) 
                                        (0273) .SECTION
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;  FUNCTION NAME:  DELSIG11_1_iGetData:
                                        (0276) ;
                                        (0277) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0278) ;                   available.
                                        (0279) ;-----------------------------------------------------------------------------
                                        (0280) ;  ARGUMENTS:    None.
                                        (0281) ;  RETURNS:      fastcall16 INT iData (LSB in A, MSB in X)
                                        (0282) ;  SIDE EFFECTS:
                                        (0283) ;    The A and X registers may be modified by this or future implementations
                                        (0284) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0285) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0286) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0287) ;    functions.
                                        (0288) ;          
                                        (0289) ;    Currently only the page pointer registers listed below are modified:
                                        (0290) ;          CUR_PP
                                        (0291) ;
                                        (0292) ;    Timer interrupts are momentarily halted and restarted to
                                        (0293) ;    ensure data integrity.
                                        (0294) ;
                                        (0295)  DELSIG11_1_iGetData:
                                        (0296) _DELSIG11_1_iGetData:
                                        (0297)    RAM_PROLOGUE   RAM_USE_CLASS_4
                                        (0298)    RAM_SETPAGE_CUR >DELSIG11_1_iResult
                                        (0299)    M8C_DisableIntMask DELSIG11_1_INT_REG, DELSIG11_1_INT_MASK         ; Disable its interrupt
0583: 58 18    MOV   X,[0x18]           (0300)    mov  X, [DELSIG11_1_iResult + HIGHBYTE]
0585: 51 19    MOV   A,[0x19]           (0301)    mov  A, [DELSIG11_1_iResult + LOWBYTE]
0587: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0302)    M8C_EnableIntMask DELSIG11_1_INT_REG, DELSIG11_1_INT_MASK          ; Enable timer interrupt
                                        (0303)    RAM_EPILOGUE  RAM_USE_CLASS_4
058A: 7F       RET                      (0304)    ret
                                        (0305) .ENDSECTION
                                        (0306) 
                                        (0307) 
                                        (0308) .SECTION
                                        (0309) ;-----------------------------------------------------------------------------
                                        (0310) ;  FUNCTION NAME: DELSIG11_1_ClearFlag
                                        (0311) ;
                                        (0312) ;  DESCRIPTION: Clears the data ready flag.
                                        (0313) ;-----------------------------------------------------------------------------
                                        (0314) ;  ARGUMENTS:    None.
                                        (0315) ;  RETURNS:      Nothing.
                                        (0316) ;  SIDE EFFECTS:
                                        (0317) ;    The A and X registers may be modified by this or future implementations
                                        (0318) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0319) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0320) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0321) ;    functions.
                                        (0322) ;          
                                        (0323) ;    Currently only the page pointer registers listed below are modified:
                                        (0324) ;          CUR_PP
                                        (0325) ;
                                        (0326)  DELSIG11_1_ClearFlag:
                                        (0327) _DELSIG11_1_ClearFlag:
                                        (0328)    RAM_PROLOGUE   RAM_USE_CLASS_4
                                        (0329)    RAM_SETPAGE_CUR >DELSIG11_1_bfStatus
058B: 26 1A EF AND   [0x1A],0xEF        (0330)    and  [DELSIG11_1_bfStatus], ~DELSIG11_1_DATA_READY_BIT
                                        (0331)    RAM_EPILOGUE  RAM_USE_CLASS_4
058E: 7F       RET                      (0332)    ret
                                        (0333) .ENDSECTION
                                        (0334) 
                                        (0335) 
                                        (0336) ENDIF
                                        (0337) 
                                        (0338) 
                                        (0339) ; End of File DELSIG11_1.asm
FILE: C:\Users\revecom\Desktop\PSOC\TestLed4\TestLed4\TestLed4\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <stdlib.h>
(0008) #include <string.h>
(0009) 
(0010) 
(0011) void main(void)
(0012) {
__UserModules_end|_main|__text_start|_main:
  tmp                  --> X+6
  val                  --> X+2
  s                    --> X+0
    058F: 10       PUSH  X
    0590: 4F       MOV   X,SP
    0591: 38 08    ADD   SP,0x8
(0013) 	// M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
(0014) 	// Insert your main routine code here.
(0015) char *s;
(0016) int tmp;
(0017) float val;
(0018) extern int DELSIG11_1_iResult ;
(0019) LED_BL_Start();
    0593: 10       PUSH  X
    0594: 7C 02 F4 LCALL _LED_BL_Off|_LED_BL_Start|LED_BL_Stop|_LED_BL_Stop|LED_BL_Start|LED_BL_Off
(0020) LED_BL_Switch(1);
    0597: 50 01    MOV   A,0x1
    0599: 7C 02 F6 LCALL _LED_BL_Switch
(0021) LCD_1_Start();
    059C: 7C 04 19 LCALL LCD_1_Init|LCD_1_Start|_LCD_1_Init|_LCD_1_Start
(0022) DELSIG11_1_Start(DELSIG11_1_HIGHPOWER);
    059F: 50 03    MOV   A,0x3
    05A1: 7C 05 2F LCALL _DELSIG11_1_SetPower|DELSIG11_1_Start|_DELSIG11_1_Start|DELSIG11_1_SetPower
    05A4: 20       POP   X
    05A5: 81 03    JMP   0x06A9
(0023) while (1){
(0024) 	DELSIG11_1_StartAD(); //: activer et initialiser le temporisateur du convertisseur
    05A7: 10       PUSH  X
    05A8: 7C 05 41 LCALL _DELSIG11_1_StartAD
    05AB: 20       POP   X
(0025) 	while ( ! DELSIG11_1_fIsDataAvailable() );// vérifier la disponibilité d’une donnée valide
    05AC: 10       PUSH  X
    05AD: 7C 05 6F LCALL _DELSIG11_1_fIsDataAvailable
    05B0: 20       POP   X
    05B1: 39 00    CMP   A,0x0
    05B3: AF F8    JZ    0x05AC
(0026) 	LCD_1_Position(0,0);
    05B5: 10       PUSH  X
    05B6: 50 00    MOV   A,0x0
    05B8: 57 00    MOV   X,0x0
    05BA: 7C 04 89 LCALL _LCD_1_Position
(0027) 	LCD_1_PrCString("Valeur_En_Volt");
    05BD: 50 01    MOV   A,0x1
    05BF: 08       PUSH  A
    05C0: 50 50    MOV   A,0x50
    05C2: 5C       MOV   X,A
    05C3: 18       POP   A
    05C4: 7C 03 18 LCALL _LCD_1_PrCString
(0028) 	DELSIG11_1_iGetData();         //getting data value , a fct that will store it in global variable DELSIG11_1_iResult
    05C7: 7C 05 80 LCALL _DELSIG11_1_iGetData
    05CA: 20       POP   X
(0029) 	val=((DELSIG11_1_iResult+1024)*5.0)/2048.0;
    05CB: 51 19    MOV   A,[0x19]
    05CD: 01 00    ADD   A,0x0
    05CF: 53 09    MOV   [__r1],A
    05D1: 51 18    MOV   A,[0x18]
    05D3: 09 04    ADC   A,0x4
    05D5: 5F 07 09 MOV   [__r3],[__r1]
    05D8: 53 08    MOV   [__r2],A
    05DA: 47 08 80 TST   [__r2],0x80
    05DD: A0 09    JZ    0x05E7
    05DF: 55 09 FF MOV   [__r1],0xFF
    05E2: 55 0A FF MOV   [__r0],0xFF
    05E5: 80 07    JMP   0x05ED
    05E7: 55 09 00 MOV   [__r1],0x0
    05EA: 55 0A 00 MOV   [__r0],0x0
    05ED: 51 0A    MOV   A,[__r0]
    05EF: 08       PUSH  A
    05F0: 51 09    MOV   A,[__r1]
    05F2: 08       PUSH  A
    05F3: 51 08    MOV   A,[__r2]
    05F5: 08       PUSH  A
    05F6: 51 07    MOV   A,[__r3]
    05F8: 08       PUSH  A
    05F9: 7C 0A 4D LCALL 0x0A4D
    05FC: 18       POP   A
    05FD: 53 07    MOV   [__r3],A
    05FF: 18       POP   A
    0600: 53 08    MOV   [__r2],A
    0602: 18       POP   A
    0603: 53 09    MOV   [__r1],A
    0605: 18       POP   A
    0606: 08       PUSH  A
    0607: 51 09    MOV   A,[__r1]
    0609: 08       PUSH  A
    060A: 51 08    MOV   A,[__r2]
    060C: 08       PUSH  A
    060D: 51 07    MOV   A,[__r3]
    060F: 08       PUSH  A
    0610: 50 40    MOV   A,0x40
    0612: 08       PUSH  A
    0613: 50 A0    MOV   A,0xA0
    0615: 08       PUSH  A
    0616: 50 00    MOV   A,0x0
    0618: 08       PUSH  A
    0619: 08       PUSH  A
    061A: 7C 08 9A LCALL 0x089A
    061D: 18       POP   A
    061E: 53 07    MOV   [__r3],A
    0620: 18       POP   A
    0621: 53 08    MOV   [__r2],A
    0623: 18       POP   A
    0624: 53 09    MOV   [__r1],A
    0626: 18       POP   A
    0627: 53 0A    MOV   [__r0],A
    0629: 38 FC    ADD   SP,0xFC
    062B: 50 45    MOV   A,0x45
    062D: 08       PUSH  A
    062E: 50 00    MOV   A,0x0
    0630: 08       PUSH  A
    0631: 08       PUSH  A
    0632: 08       PUSH  A
    0633: 51 0A    MOV   A,[__r0]
    0635: 08       PUSH  A
    0636: 51 09    MOV   A,[__r1]
    0638: 08       PUSH  A
    0639: 51 08    MOV   A,[__r2]
    063B: 08       PUSH  A
    063C: 51 07    MOV   A,[__r3]
    063E: 08       PUSH  A
    063F: 7C 07 BD LCALL 0x07BD
    0642: 18       POP   A
    0643: 54 05    MOV   [X+5],A
    0645: 18       POP   A
    0646: 54 04    MOV   [X+4],A
    0648: 18       POP   A
    0649: 54 03    MOV   [X+3],A
    064B: 18       POP   A
    064C: 54 02    MOV   [X+2],A
    064E: 38 FC    ADD   SP,0xFC
(0030) 	s=ftoa(val,&tmp);
    0650: 5A 09    MOV   [__r1],X
    0652: 06 09 06 ADD   [__r1],0x6
    0655: 51 0A    MOV   A,[__r0]
    0657: 08       PUSH  A
    0658: 51 09    MOV   A,[__r1]
    065A: 08       PUSH  A
    065B: 52 02    MOV   A,[X+2]
    065D: 08       PUSH  A
    065E: 52 03    MOV   A,[X+3]
    0660: 08       PUSH  A
    0661: 52 04    MOV   A,[X+4]
    0663: 08       PUSH  A
    0664: 52 05    MOV   A,[X+5]
    0666: 08       PUSH  A
    0667: 7C 0C DA LCALL _ftoa
    066A: 51 09    MOV   A,[__r1]
    066C: 54 01    MOV   [X+1],A
    066E: 51 0A    MOV   A,[__r0]
    0670: 54 00    MOV   [X+0],A
(0031) 	if ( strlen(s) > 4 ) {
    0672: 52 00    MOV   A,[X+0]
    0674: 08       PUSH  A
    0675: 52 01    MOV   A,[X+1]
    0677: 08       PUSH  A
    0678: 7C 0A B6 LCALL _strlen
    067B: 38 F8    ADD   SP,0xF8
    067D: 50 04    MOV   A,0x4
    067F: 12 09    SUB   A,[__r1]
    0681: 50 00    MOV   A,0x0
    0683: 1A 0A    SBB   A,[__r0]
    0685: D0 0B    JNC   0x0691
(0032) 	      s[4]='/0';
    0687: 52 01    MOV   A,[X+1]
    0689: 01 04    ADD   A,0x4
    068B: 53 09    MOV   [__r1],A
    068D: 50 2F    MOV   A,0x2F
    068F: 3F 09    MVI   [__r1],A
(0033) 	                     }
(0034) 	LCD_1_Position(0,1);
    0691: 10       PUSH  X
    0692: 57 01    MOV   X,0x1
    0694: 50 00    MOV   A,0x0
    0696: 7C 04 89 LCALL _LCD_1_Position
    0699: 20       POP   X
(0035) 	LCD_1_PrString(s);
    069A: 10       PUSH  X
    069B: 52 00    MOV   A,[X+0]
    069D: 08       PUSH  A
    069E: 52 01    MOV   A,[X+1]
    06A0: 5C       MOV   X,A
    06A1: 18       POP   A
    06A2: 7C 03 54 LCALL _LCD_1_PrString
(0036) 	DELSIG11_1_ClearFlag();
    06A5: 7C 05 8B LCALL _DELSIG11_1_ClearFlag
    06A8: 20       POP   X
(0037) }
    06A9: 8E FD    JMP   0x05A7
(0038) }    06AB: 38 F8    ADD   SP,0xF8
    06AD: 20       POP   X
    06AE: 8F FF    JMP   0x06AE
_strlenLMM:
    0AAB: 62 D0 00 MOV   REG[0xD0],0x0
    0AAE: 10       PUSH  X
    0AAF: 4F       MOV   X,SP
    0AB0: 52 FB    MOV   A,[X-5]
    0AB2: 60 D4    MOV   REG[0xD4],A
    0AB4: 80 03    JMP   0x0AB8
_strlen:
    0AB6: 10       PUSH  X
    0AB7: 4F       MOV   X,SP
    0AB8: 55 09 00 MOV   [__r1],0x0
    0ABB: 55 0A 00 MOV   [__r0],0x0
    0ABE: 52 FC    MOV   A,[X-4]
    0AC0: 53 08    MOV   [__r2],A
    0AC2: 3E 08    MVI   A,[__r2]
    0AC4: 39 00    CMP   A,0x0
    0AC6: A0 08    JZ    0x0ACF
    0AC8: 76 09    INC   [__r1]
    0ACA: 0E 0A 00 ADC   [__r0],0x0
    0ACD: 8F F4    JMP   0x0AC2
    0ACF: 20       POP   X
    0AD0: 7F       RET   
_ltoa:
    0AD1: 10       PUSH  X
    0AD2: 4F       MOV   X,SP
    0AD3: 38 0B    ADD   SP,0xB
    0AD5: 52 F7    MOV   A,[X-9]
    0AD7: 54 02    MOV   [X+2],A
    0AD9: 52 F8    MOV   A,[X-8]
    0ADB: 54 03    MOV   [X+3],A
    0ADD: 52 F9    MOV   A,[X-7]
    0ADF: 54 04    MOV   [X+4],A
    0AE1: 52 FA    MOV   A,[X-6]
    0AE3: 54 05    MOV   [X+5],A
    0AE5: 3D F7 00 CMP   [X-9],0x0
    0AE8: B0 2C    JNZ   0x0B15
    0AEA: 3D F8 00 CMP   [X-8],0x0
    0AED: B0 27    JNZ   0x0B15
    0AEF: 3D F9 00 CMP   [X-7],0x0
    0AF2: B0 22    JNZ   0x0B15
    0AF4: 3D FA 00 CMP   [X-6],0x0
    0AF7: B0 1D    JNZ   0x0B15
    0AF9: 52 FC    MOV   A,[X-4]
    0AFB: 53 09    MOV   [__r1],A
    0AFD: 50 30    MOV   A,0x30
    0AFF: 3F 09    MVI   [__r1],A
    0B01: 52 FC    MOV   A,[X-4]
    0B03: 01 01    ADD   A,0x1
    0B05: 53 09    MOV   [__r1],A
    0B07: 50 00    MOV   A,0x0
    0B09: 3F 09    MVI   [__r1],A
    0B0B: 52 FC    MOV   A,[X-4]
    0B0D: 53 09    MOV   [__r1],A
    0B0F: 52 FB    MOV   A,[X-5]
    0B11: 53 0A    MOV   [__r0],A
    0B13: 81 C2    JMP   0x0CD6
    0B15: 52 FA    MOV   A,[X-6]
    0B17: 11 00    SUB   A,0x0
    0B19: 52 F9    MOV   A,[X-7]
    0B1B: 19 00    SBB   A,0x0
    0B1D: 52 F8    MOV   A,[X-8]
    0B1F: 19 00    SBB   A,0x0
    0B21: 52 F7    MOV   A,[X-9]
    0B23: 31 80    XOR   A,0x80
    0B25: 19 80    SBB   A,0x80
    0B27: D0 38    JNC   0x0B60
    0B29: 3D F5 00 CMP   [X-11],0x0
    0B2C: B0 33    JNZ   0x0B60
    0B2E: 3D F6 0A CMP   [X-10],0xA
    0B31: B0 2E    JNZ   0x0B60
    0B33: 56 08 01 MOV   [X+8],0x1
    0B36: 52 02    MOV   A,[X+2]
    0B38: 73       CPL   A
    0B39: 53 0A    MOV   [__r0],A
    0B3B: 52 03    MOV   A,[X+3]
    0B3D: 73       CPL   A
    0B3E: 53 09    MOV   [__r1],A
    0B40: 52 04    MOV   A,[X+4]
    0B42: 73       CPL   A
    0B43: 53 08    MOV   [__r2],A
    0B45: 52 05    MOV   A,[X+5]
    0B47: 73       CPL   A
    0B48: 01 01    ADD   A,0x1
    0B4A: 54 05    MOV   [X+5],A
    0B4C: 51 08    MOV   A,[__r2]
    0B4E: 09 00    ADC   A,0x0
    0B50: 54 04    MOV   [X+4],A
    0B52: 51 09    MOV   A,[__r1]
    0B54: 09 00    ADC   A,0x0
    0B56: 54 03    MOV   [X+3],A
    0B58: 51 0A    MOV   A,[__r0]
    0B5A: 09 00    ADC   A,0x0
    0B5C: 54 02    MOV   [X+2],A
    0B5E: 80 04    JMP   0x0B63
    0B60: 56 08 00 MOV   [X+8],0x0
    0B63: 52 FC    MOV   A,[X-4]
    0B65: 54 01    MOV   [X+1],A
    0B67: 52 F6    MOV   A,[X-10]
    0B69: 53 07    MOV   [__r3],A
    0B6B: 52 F5    MOV   A,[X-11]
    0B6D: 53 08    MOV   [__r2],A
    0B6F: 47 08 80 TST   [__r2],0x80
    0B72: A0 09    JZ    0x0B7C
    0B74: 55 09 FF MOV   [__r1],0xFF
    0B77: 55 0A FF MOV   [__r0],0xFF
    0B7A: 80 07    JMP   0x0B82
    0B7C: 55 09 00 MOV   [__r1],0x0
    0B7F: 55 0A 00 MOV   [__r0],0x0
    0B82: 51 0A    MOV   A,[__r0]
    0B84: 08       PUSH  A
    0B85: 51 09    MOV   A,[__r1]
    0B87: 08       PUSH  A
    0B88: 51 08    MOV   A,[__r2]
    0B8A: 08       PUSH  A
    0B8B: 51 07    MOV   A,[__r3]
    0B8D: 08       PUSH  A
    0B8E: 52 02    MOV   A,[X+2]
    0B90: 08       PUSH  A
    0B91: 52 03    MOV   A,[X+3]
    0B93: 08       PUSH  A
    0B94: 52 04    MOV   A,[X+4]
    0B96: 08       PUSH  A
    0B97: 52 05    MOV   A,[X+5]
    0B99: 08       PUSH  A
    0B9A: 7C 06 B0 LCALL 0x06B0
    0B9D: 38 FC    ADD   SP,0xFC
    0B9F: 18       POP   A
    0BA0: 53 07    MOV   [__r3],A
    0BA2: 18       POP   A
    0BA3: 53 08    MOV   [__r2],A
    0BA5: 18       POP   A
    0BA6: 18       POP   A
    0BA7: 51 07    MOV   A,[__r3]
    0BA9: 54 0A    MOV   [X+10],A
    0BAB: 51 08    MOV   A,[__r2]
    0BAD: 54 09    MOV   [X+9],A
    0BAF: 50 09    MOV   A,0x9
    0BB1: 13 0A    SUB   A,[X+10]
    0BB3: 52 09    MOV   A,[X+9]
    0BB5: 31 80    XOR   A,0x80
    0BB7: 53 02    MOV   [__rX],A
    0BB9: 50 80    MOV   A,0x80
    0BBB: 1A 02    SBB   A,[__rX]
    0BBD: C0 1D    JC    0x0BDB
    0BBF: 52 01    MOV   A,[X+1]
    0BC1: 53 09    MOV   [__r1],A
    0BC3: 52 00    MOV   A,[X+0]
    0BC5: 53 0A    MOV   [__r0],A
    0BC7: 51 09    MOV   A,[__r1]
    0BC9: 01 01    ADD   A,0x1
    0BCB: 54 01    MOV   [X+1],A
    0BCD: 51 0A    MOV   A,[__r0]
    0BCF: 09 00    ADC   A,0x0
    0BD1: 54 00    MOV   [X+0],A
    0BD3: 52 0A    MOV   A,[X+10]
    0BD5: 01 30    ADD   A,0x30
    0BD7: 3F 09    MVI   [__r1],A
    0BD9: 80 1B    JMP   0x0BF5
    0BDB: 52 01    MOV   A,[X+1]
    0BDD: 53 09    MOV   [__r1],A
    0BDF: 52 00    MOV   A,[X+0]
    0BE1: 53 0A    MOV   [__r0],A
    0BE3: 51 09    MOV   A,[__r1]
    0BE5: 01 01    ADD   A,0x1
    0BE7: 54 01    MOV   [X+1],A
    0BE9: 51 0A    MOV   A,[__r0]
    0BEB: 09 00    ADC   A,0x0
    0BED: 54 00    MOV   [X+0],A
    0BEF: 52 0A    MOV   A,[X+10]
    0BF1: 01 57    ADD   A,0x57
    0BF3: 3F 09    MVI   [__r1],A
    0BF5: 52 F6    MOV   A,[X-10]
    0BF7: 53 07    MOV   [__r3],A
    0BF9: 52 F5    MOV   A,[X-11]
    0BFB: 53 08    MOV   [__r2],A
    0BFD: 47 08 80 TST   [__r2],0x80
    0C00: A0 09    JZ    0x0C0A
    0C02: 55 09 FF MOV   [__r1],0xFF
    0C05: 55 0A FF MOV   [__r0],0xFF
    0C08: 80 07    JMP   0x0C10
    0C0A: 55 09 00 MOV   [__r1],0x0
    0C0D: 55 0A 00 MOV   [__r0],0x0
    0C10: 51 0A    MOV   A,[__r0]
    0C12: 08       PUSH  A
    0C13: 51 09    MOV   A,[__r1]
    0C15: 08       PUSH  A
    0C16: 51 08    MOV   A,[__r2]
    0C18: 08       PUSH  A
    0C19: 51 07    MOV   A,[__r3]
    0C1B: 08       PUSH  A
    0C1C: 52 02    MOV   A,[X+2]
    0C1E: 08       PUSH  A
    0C1F: 52 03    MOV   A,[X+3]
    0C21: 08       PUSH  A
    0C22: 52 04    MOV   A,[X+4]
    0C24: 08       PUSH  A
    0C25: 52 05    MOV   A,[X+5]
    0C27: 08       PUSH  A
    0C28: 7C 06 B0 LCALL 0x06B0
    0C2B: 18       POP   A
    0C2C: 54 05    MOV   [X+5],A
    0C2E: 18       POP   A
    0C2F: 54 04    MOV   [X+4],A
    0C31: 18       POP   A
    0C32: 54 03    MOV   [X+3],A
    0C34: 18       POP   A
    0C35: 54 02    MOV   [X+2],A
    0C37: 38 FC    ADD   SP,0xFC
    0C39: 3D 02 00 CMP   [X+2],0x0
    0C3C: BF 2A    JNZ   0x0B67
    0C3E: 3D 03 00 CMP   [X+3],0x0
    0C41: BF 25    JNZ   0x0B67
    0C43: 3D 04 00 CMP   [X+4],0x0
    0C46: BF 20    JNZ   0x0B67
    0C48: 3D 05 00 CMP   [X+5],0x0
    0C4B: BF 1B    JNZ   0x0B67
    0C4D: 3D 08 00 CMP   [X+8],0x0
    0C50: A0 19    JZ    0x0C6A
    0C52: 52 01    MOV   A,[X+1]
    0C54: 53 09    MOV   [__r1],A
    0C56: 52 00    MOV   A,[X+0]
    0C58: 53 0A    MOV   [__r0],A
    0C5A: 51 09    MOV   A,[__r1]
    0C5C: 01 01    ADD   A,0x1
    0C5E: 54 01    MOV   [X+1],A
    0C60: 51 0A    MOV   A,[__r0]
    0C62: 09 00    ADC   A,0x0
    0C64: 54 00    MOV   [X+0],A
    0C66: 50 2D    MOV   A,0x2D
    0C68: 3F 09    MVI   [__r1],A
    0C6A: 52 01    MOV   A,[X+1]
    0C6C: 53 09    MOV   [__r1],A
    0C6E: 52 00    MOV   A,[X+0]
    0C70: 53 0A    MOV   [__r0],A
    0C72: 51 09    MOV   A,[__r1]
    0C74: 01 FF    ADD   A,0xFF
    0C76: 54 01    MOV   [X+1],A
    0C78: 51 0A    MOV   A,[__r0]
    0C7A: 09 FF    ADC   A,0xFF
    0C7C: 54 00    MOV   [X+0],A
    0C7E: 50 00    MOV   A,0x0
    0C80: 3F 09    MVI   [__r1],A
    0C82: 52 FC    MOV   A,[X-4]
    0C84: 54 07    MOV   [X+7],A
    0C86: 80 3D    JMP   0x0CC4
    0C88: 52 07    MOV   A,[X+7]
    0C8A: 53 09    MOV   [__r1],A
    0C8C: 3E 09    MVI   A,[__r1]
    0C8E: 54 08    MOV   [X+8],A
    0C90: 52 07    MOV   A,[X+7]
    0C92: 53 09    MOV   [__r1],A
    0C94: 52 06    MOV   A,[X+6]
    0C96: 53 0A    MOV   [__r0],A
    0C98: 51 09    MOV   A,[__r1]
    0C9A: 01 01    ADD   A,0x1
    0C9C: 54 07    MOV   [X+7],A
    0C9E: 51 0A    MOV   A,[__r0]
    0CA0: 09 00    ADC   A,0x0
    0CA2: 54 06    MOV   [X+6],A
    0CA4: 52 01    MOV   A,[X+1]
    0CA6: 53 07    MOV   [__r3],A
    0CA8: 3E 07    MVI   A,[__r3]
    0CAA: 3F 09    MVI   [__r1],A
    0CAC: 52 01    MOV   A,[X+1]
    0CAE: 53 09    MOV   [__r1],A
    0CB0: 52 00    MOV   A,[X+0]
    0CB2: 53 0A    MOV   [__r0],A
    0CB4: 51 09    MOV   A,[__r1]
    0CB6: 01 FF    ADD   A,0xFF
    0CB8: 54 01    MOV   [X+1],A
    0CBA: 51 0A    MOV   A,[__r0]
    0CBC: 09 FF    ADC   A,0xFF
    0CBE: 54 00    MOV   [X+0],A
    0CC0: 52 08    MOV   A,[X+8]
    0CC2: 3F 09    MVI   [__r1],A
    0CC4: 52 01    MOV   A,[X+1]
    0CC6: 53 0A    MOV   [__r0],A
    0CC8: 52 07    MOV   A,[X+7]
    0CCA: 3A 0A    CMP   A,[__r0]
    0CCC: CF BB    JC    0x0C88
    0CCE: 52 FC    MOV   A,[X-4]
    0CD0: 53 09    MOV   [__r1],A
    0CD2: 52 FB    MOV   A,[X-5]
    0CD4: 53 0A    MOV   [__r0],A
    0CD6: 38 F5    ADD   SP,0xF5
    0CD8: 20       POP   X
    0CD9: 7F       RET   
_ftoa:
    0CDA: 10       PUSH  X
    0CDB: 4F       MOV   X,SP
    0CDC: 38 16    ADD   SP,0x16
    0CDE: 52 F8    MOV   A,[X-8]
    0CE0: 53 09    MOV   [__r1],A
    0CE2: 50 00    MOV   A,0x0
    0CE4: 3F 09    MVI   [__r1],A
    0CE6: 3F 09    MVI   [__r1],A
    0CE8: 08       PUSH  A
    0CE9: 08       PUSH  A
    0CEA: 08       PUSH  A
    0CEB: 08       PUSH  A
    0CEC: 52 F9    MOV   A,[X-7]
    0CEE: 08       PUSH  A
    0CEF: 52 FA    MOV   A,[X-6]
    0CF1: 08       PUSH  A
    0CF2: 52 FB    MOV   A,[X-5]
    0CF4: 08       PUSH  A
    0CF5: 52 FC    MOV   A,[X-4]
    0CF7: 08       PUSH  A
    0CF8: 7C 07 6F LCALL 0x076F
    0CFB: 38 F8    ADD   SP,0xF8
    0CFD: 39 00    CMP   A,0x0
    0CFF: B0 15    JNZ   0x0D15
    0D01: 55 1B 30 MOV   [0x1B],0x30
    0D04: 55 1C 2E MOV   [0x1C],0x2E
    0D07: 55 1D 30 MOV   [0x1D],0x30
    0D0A: 55 1E 00 MOV   [0x1E],0x0
    0D0D: 55 09 1B MOV   [__r1],0x1B
    0D10: 55 0A 00 MOV   [__r0],0x0
    0D13: 83 66    JMP   0x107A
    0D15: 52 F9    MOV   A,[X-7]
    0D17: 54 06    MOV   [X+6],A
    0D19: 52 FA    MOV   A,[X-6]
    0D1B: 54 07    MOV   [X+7],A
    0D1D: 52 FB    MOV   A,[X-5]
    0D1F: 54 08    MOV   [X+8],A
    0D21: 52 FC    MOV   A,[X-4]
    0D23: 54 09    MOV   [X+9],A
    0D25: 52 06    MOV   A,[X+6]
    0D27: 53 0A    MOV   [__r0],A
    0D29: 52 07    MOV   A,[X+7]
    0D2B: 53 09    MOV   [__r1],A
    0D2D: 52 08    MOV   A,[X+8]
    0D2F: 53 08    MOV   [__r2],A
    0D31: 52 09    MOV   A,[X+9]
    0D33: 53 07    MOV   [__r3],A
    0D35: 50 17    MOV   A,0x17
    0D37: 68 0A    ASR   [__r0]
    0D39: 6E 09    RRC   [__r1]
    0D3B: 6E 08    RRC   [__r2]
    0D3D: 6E 07    RRC   [__r3]
    0D3F: 78       DEC   A
    0D40: BF F6    JNZ   0x0D37
    0D42: 51 07    MOV   A,[__r3]
    0D44: 11 7F    SUB   A,0x7F
    0D46: 54 0B    MOV   [X+11],A
    0D48: 50 00    MOV   A,0x0
    0D4A: 19 00    SBB   A,0x0
    0D4C: 54 0A    MOV   [X+10],A
    0D4E: 52 09    MOV   A,[X+9]
    0D50: 53 07    MOV   [__r3],A
    0D52: 52 08    MOV   A,[X+8]
    0D54: 53 08    MOV   [__r2],A
    0D56: 52 07    MOV   A,[X+7]
    0D58: 53 09    MOV   [__r1],A
    0D5A: 51 07    MOV   A,[__r3]
    0D5C: 54 13    MOV   [X+19],A
    0D5E: 51 08    MOV   A,[__r2]
    0D60: 54 12    MOV   [X+18],A
    0D62: 51 09    MOV   A,[__r1]
    0D64: 29 80    OR    A,0x80
    0D66: 54 11    MOV   [X+17],A
    0D68: 56 10 00 MOV   [X+16],0x0
    0D6B: 56 02 00 MOV   [X+2],0x0
    0D6E: 56 03 00 MOV   [X+3],0x0
    0D71: 56 04 00 MOV   [X+4],0x0
    0D74: 56 05 00 MOV   [X+5],0x0
    0D77: 56 0C 00 MOV   [X+12],0x0
    0D7A: 56 0D 00 MOV   [X+13],0x0
    0D7D: 56 0E 00 MOV   [X+14],0x0
    0D80: 56 0F 00 MOV   [X+15],0x0
    0D83: 52 0B    MOV   A,[X+11]
    0D85: 11 1F    SUB   A,0x1F
    0D87: 52 0A    MOV   A,[X+10]
    0D89: 31 80    XOR   A,0x80
    0D8B: 19 80    SBB   A,0x80
    0D8D: C0 15    JC    0x0DA3
    0D8F: 52 F8    MOV   A,[X-8]
    0D91: 53 09    MOV   [__r1],A
    0D93: 50 FF    MOV   A,0xFF
    0D95: 3F 09    MVI   [__r1],A
    0D97: 50 FE    MOV   A,0xFE
    0D99: 3F 09    MVI   [__r1],A
    0D9B: 55 09 00 MOV   [__r1],0x0
    0D9E: 55 0A 00 MOV   [__r0],0x0
    0DA1: 82 D8    JMP   0x107A
    0DA3: 52 0B    MOV   A,[X+11]
    0DA5: 11 E9    SUB   A,0xE9
    0DA7: 52 0A    MOV   A,[X+10]
    0DA9: 31 80    XOR   A,0x80
    0DAB: 19 7F    SBB   A,0x7F
    0DAD: D0 13    JNC   0x0DC1
    0DAF: 52 F8    MOV   A,[X-8]
    0DB1: 53 09    MOV   [__r1],A
    0DB3: 50 FF    MOV   A,0xFF
    0DB5: 3F 09    MVI   [__r1],A
    0DB7: 3F 09    MVI   [__r1],A
    0DB9: 55 09 00 MOV   [__r1],0x0
    0DBC: 55 0A 00 MOV   [__r0],0x0
    0DBF: 82 BA    JMP   0x107A
    0DC1: 52 0B    MOV   A,[X+11]
    0DC3: 11 17    SUB   A,0x17
    0DC5: 52 0A    MOV   A,[X+10]
    0DC7: 31 80    XOR   A,0x80
    0DC9: 19 80    SBB   A,0x80
    0DCB: C0 3A    JC    0x0E06
    0DCD: 52 0B    MOV   A,[X+11]
    0DCF: 11 17    SUB   A,0x17
    0DD1: 53 09    MOV   [__r1],A
    0DD3: 52 10    MOV   A,[X+16]
    0DD5: 53 06    MOV   [__r4],A
    0DD7: 52 11    MOV   A,[X+17]
    0DD9: 53 05    MOV   [__r5],A
    0DDB: 52 12    MOV   A,[X+18]
    0DDD: 53 04    MOV   [__r6],A
    0DDF: 52 13    MOV   A,[X+19]
    0DE1: 53 03    MOV   [__r7],A
    0DE3: 51 09    MOV   A,[__r1]
    0DE5: 21 1F    AND   A,0x1F
    0DE7: A0 0C    JZ    0x0DF4
    0DE9: 65 03    ASL   [__r7]
    0DEB: 6B 04    RLC   [__r6]
    0DED: 6B 05    RLC   [__r5]
    0DEF: 6B 06    RLC   [__r4]
    0DF1: 78       DEC   A
    0DF2: BF F6    JNZ   0x0DE9
    0DF4: 51 06    MOV   A,[__r4]
    0DF6: 54 0C    MOV   [X+12],A
    0DF8: 51 05    MOV   A,[__r5]
    0DFA: 54 0D    MOV   [X+13],A
    0DFC: 51 04    MOV   A,[__r6]
    0DFE: 54 0E    MOV   [X+14],A
    0E00: 51 03    MOV   A,[__r7]
    0E02: 54 0F    MOV   [X+15],A
    0E04: 80 B5    JMP   0x0EBA
    0E06: 52 0B    MOV   A,[X+11]
    0E08: 11 00    SUB   A,0x0
    0E0A: 52 0A    MOV   A,[X+10]
    0E0C: 31 80    XOR   A,0x80
    0E0E: 19 80    SBB   A,0x80
    0E10: C0 70    JC    0x0E81
    0E12: 50 17    MOV   A,0x17
    0E14: 13 0B    SUB   A,[X+11]
    0E16: 53 09    MOV   [__r1],A
    0E18: 52 10    MOV   A,[X+16]
    0E1A: 53 06    MOV   [__r4],A
    0E1C: 52 11    MOV   A,[X+17]
    0E1E: 53 05    MOV   [__r5],A
    0E20: 52 12    MOV   A,[X+18]
    0E22: 53 04    MOV   [__r6],A
    0E24: 52 13    MOV   A,[X+19]
    0E26: 53 03    MOV   [__r7],A
    0E28: 51 09    MOV   A,[__r1]
    0E2A: 21 1F    AND   A,0x1F
    0E2C: A0 0C    JZ    0x0E39
    0E2E: 68 06    ASR   [__r4]
    0E30: 6E 05    RRC   [__r5]
    0E32: 6E 04    RRC   [__r6]
    0E34: 6E 03    RRC   [__r7]
    0E36: 78       DEC   A
    0E37: BF F6    JNZ   0x0E2E
    0E39: 51 06    MOV   A,[__r4]
    0E3B: 54 0C    MOV   [X+12],A
    0E3D: 51 05    MOV   A,[__r5]
    0E3F: 54 0D    MOV   [X+13],A
    0E41: 51 04    MOV   A,[__r6]
    0E43: 54 0E    MOV   [X+14],A
    0E45: 51 03    MOV   A,[__r7]
    0E47: 54 0F    MOV   [X+15],A
    0E49: 52 0B    MOV   A,[X+11]
    0E4B: 01 01    ADD   A,0x1
    0E4D: 53 09    MOV   [__r1],A
    0E4F: 52 10    MOV   A,[X+16]
    0E51: 53 06    MOV   [__r4],A
    0E53: 52 11    MOV   A,[X+17]
    0E55: 53 05    MOV   [__r5],A
    0E57: 52 12    MOV   A,[X+18]
    0E59: 53 04    MOV   [__r6],A
    0E5B: 52 13    MOV   A,[X+19]
    0E5D: 53 03    MOV   [__r7],A
    0E5F: 51 09    MOV   A,[__r1]
    0E61: 21 1F    AND   A,0x1F
    0E63: A0 0C    JZ    0x0E70
    0E65: 65 03    ASL   [__r7]
    0E67: 6B 04    RLC   [__r6]
    0E69: 6B 05    RLC   [__r5]
    0E6B: 6B 06    RLC   [__r4]
    0E6D: 78       DEC   A
    0E6E: BF F6    JNZ   0x0E65
    0E70: 51 03    MOV   A,[__r7]
    0E72: 54 05    MOV   [X+5],A
    0E74: 51 04    MOV   A,[__r6]
    0E76: 54 04    MOV   [X+4],A
    0E78: 51 05    MOV   A,[__r5]
    0E7A: 54 03    MOV   [X+3],A
    0E7C: 56 02 00 MOV   [X+2],0x0
    0E7F: 80 3A    JMP   0x0EBA
    0E81: 52 0B    MOV   A,[X+11]
    0E83: 01 01    ADD   A,0x1
    0E85: 73       CPL   A
    0E86: 11 FF    SUB   A,0xFF
    0E88: 53 09    MOV   [__r1],A
    0E8A: 52 13    MOV   A,[X+19]
    0E8C: 53 03    MOV   [__r7],A
    0E8E: 52 12    MOV   A,[X+18]
    0E90: 53 04    MOV   [__r6],A
    0E92: 52 11    MOV   A,[X+17]
    0E94: 53 05    MOV   [__r5],A
    0E96: 55 06 00 MOV   [__r4],0x0
    0E99: 51 09    MOV   A,[__r1]
    0E9B: 21 1F    AND   A,0x1F
    0E9D: A0 0C    JZ    0x0EAA
    0E9F: 68 06    ASR   [__r4]
    0EA1: 6E 05    RRC   [__r5]
    0EA3: 6E 04    RRC   [__r6]
    0EA5: 6E 03    RRC   [__r7]
    0EA7: 78       DEC   A
    0EA8: BF F6    JNZ   0x0E9F
    0EAA: 51 06    MOV   A,[__r4]
    0EAC: 54 02    MOV   [X+2],A
    0EAE: 51 05    MOV   A,[__r5]
    0EB0: 54 03    MOV   [X+3],A
    0EB2: 51 04    MOV   A,[__r6]
    0EB4: 54 04    MOV   [X+4],A
    0EB6: 51 03    MOV   A,[__r7]
    0EB8: 54 05    MOV   [X+5],A
    0EBA: 56 01 1B MOV   [X+1],0x1B
    0EBD: 56 00 00 MOV   [X+0],0x0
    0EC0: 52 09    MOV   A,[X+9]
    0EC2: 11 00    SUB   A,0x0
    0EC4: 52 08    MOV   A,[X+8]
    0EC6: 19 00    SBB   A,0x0
    0EC8: 52 07    MOV   A,[X+7]
    0ECA: 19 00    SBB   A,0x0
    0ECC: 52 06    MOV   A,[X+6]
    0ECE: 31 80    XOR   A,0x80
    0ED0: 19 80    SBB   A,0x80
    0ED2: D0 19    JNC   0x0EEC
    0ED4: 52 01    MOV   A,[X+1]
    0ED6: 53 09    MOV   [__r1],A
    0ED8: 52 00    MOV   A,[X+0]
    0EDA: 53 0A    MOV   [__r0],A
    0EDC: 51 09    MOV   A,[__r1]
    0EDE: 01 01    ADD   A,0x1
    0EE0: 54 01    MOV   [X+1],A
    0EE2: 51 0A    MOV   A,[__r0]
    0EE4: 09 00    ADC   A,0x0
    0EE6: 54 00    MOV   [X+0],A
    0EE8: 50 2D    MOV   A,0x2D
    0EEA: 3F 09    MVI   [__r1],A
    0EEC: 3D 0C 00 CMP   [X+12],0x0
    0EEF: B0 2A    JNZ   0x0F1A
    0EF1: 3D 0D 00 CMP   [X+13],0x0
    0EF4: B0 25    JNZ   0x0F1A
    0EF6: 3D 0E 00 CMP   [X+14],0x0
    0EF9: B0 20    JNZ   0x0F1A
    0EFB: 3D 0F 00 CMP   [X+15],0x0
    0EFE: B0 1B    JNZ   0x0F1A
    0F00: 52 01    MOV   A,[X+1]
    0F02: 53 09    MOV   [__r1],A
    0F04: 52 00    MOV   A,[X+0]
    0F06: 53 0A    MOV   [__r0],A
    0F08: 51 09    MOV   A,[__r1]
    0F0A: 01 01    ADD   A,0x1
    0F0C: 54 01    MOV   [X+1],A
    0F0E: 51 0A    MOV   A,[__r0]
    0F10: 09 00    ADC   A,0x0
    0F12: 54 00    MOV   [X+0],A
    0F14: 50 30    MOV   A,0x30
    0F16: 3F 09    MVI   [__r1],A
    0F18: 80 2D    JMP   0x0F46
    0F1A: 50 00    MOV   A,0x0
    0F1C: 08       PUSH  A
    0F1D: 50 0A    MOV   A,0xA
    0F1F: 08       PUSH  A
    0F20: 52 0C    MOV   A,[X+12]
    0F22: 08       PUSH  A
    0F23: 52 0D    MOV   A,[X+13]
    0F25: 08       PUSH  A
    0F26: 52 0E    MOV   A,[X+14]
    0F28: 08       PUSH  A
    0F29: 52 0F    MOV   A,[X+15]
    0F2B: 08       PUSH  A
    0F2C: 52 00    MOV   A,[X+0]
    0F2E: 08       PUSH  A
    0F2F: 52 01    MOV   A,[X+1]
    0F31: 08       PUSH  A
    0F32: 7C 0A D1 LCALL _ltoa
    0F35: 38 F8    ADD   SP,0xF8
    0F37: 80 06    JMP   0x0F3E
    0F39: 77 01    INC   [X+1]
    0F3B: 0F 00 00 ADC   [X+0],0x0
    0F3E: 52 01    MOV   A,[X+1]
    0F40: 53 09    MOV   [__r1],A
    0F42: 3E 09    MVI   A,[__r1]
    0F44: BF F4    JNZ   0x0F39
    0F46: 52 01    MOV   A,[X+1]
    0F48: 53 09    MOV   [__r1],A
    0F4A: 52 00    MOV   A,[X+0]
    0F4C: 53 0A    MOV   [__r0],A
    0F4E: 51 09    MOV   A,[__r1]
    0F50: 01 01    ADD   A,0x1
    0F52: 54 01    MOV   [X+1],A
    0F54: 51 0A    MOV   A,[__r0]
    0F56: 09 00    ADC   A,0x0
    0F58: 54 00    MOV   [X+0],A
    0F5A: 50 2E    MOV   A,0x2E
    0F5C: 3F 09    MVI   [__r1],A
    0F5E: 3D 02 00 CMP   [X+2],0x0
    0F61: B0 2A    JNZ   0x0F8C
    0F63: 3D 03 00 CMP   [X+3],0x0
    0F66: B0 25    JNZ   0x0F8C
    0F68: 3D 04 00 CMP   [X+4],0x0
    0F6B: B0 20    JNZ   0x0F8C
    0F6D: 3D 05 00 CMP   [X+5],0x0
    0F70: B0 1B    JNZ   0x0F8C
    0F72: 52 01    MOV   A,[X+1]
    0F74: 53 09    MOV   [__r1],A
    0F76: 52 00    MOV   A,[X+0]
    0F78: 53 0A    MOV   [__r0],A
    0F7A: 51 09    MOV   A,[__r1]
    0F7C: 01 01    ADD   A,0x1
    0F7E: 54 01    MOV   [X+1],A
    0F80: 51 0A    MOV   A,[__r0]
    0F82: 09 00    ADC   A,0x0
    0F84: 54 00    MOV   [X+0],A
    0F86: 50 30    MOV   A,0x30
    0F88: 3F 09    MVI   [__r1],A
    0F8A: 80 E1    JMP   0x106C
    0F8C: 55 0A 1B MOV   [__r0],0x1B
    0F8F: 52 01    MOV   A,[X+1]
    0F91: 12 0A    SUB   A,[__r0]
    0F93: 53 0A    MOV   [__r0],A
    0F95: 50 0F    MOV   A,0xF
    0F97: 12 0A    SUB   A,[__r0]
    0F99: 11 01    SUB   A,0x1
    0F9B: 54 15    MOV   [X+21],A
    0F9D: 50 07    MOV   A,0x7
    0F9F: 3B 15    CMP   A,[X+21]
    0FA1: D0 04    JNC   0x0FA6
    0FA3: 56 15 07 MOV   [X+21],0x7
    0FA6: 56 14 00 MOV   [X+20],0x0
    0FA9: 80 93    JMP   0x103D
    0FAB: 52 02    MOV   A,[X+2]
    0FAD: 53 0A    MOV   [__r0],A
    0FAF: 52 03    MOV   A,[X+3]
    0FB1: 53 09    MOV   [__r1],A
    0FB3: 52 04    MOV   A,[X+4]
    0FB5: 53 08    MOV   [__r2],A
    0FB7: 52 05    MOV   A,[X+5]
    0FB9: 64       ASL   A
    0FBA: 53 07    MOV   [__r3],A
    0FBC: 6B 08    RLC   [__r2]
    0FBE: 6B 09    RLC   [__r1]
    0FC0: 6B 0A    RLC   [__r0]
    0FC2: 52 02    MOV   A,[X+2]
    0FC4: 53 06    MOV   [__r4],A
    0FC6: 52 03    MOV   A,[X+3]
    0FC8: 53 05    MOV   [__r5],A
    0FCA: 52 04    MOV   A,[X+4]
    0FCC: 53 04    MOV   [__r6],A
    0FCE: 52 05    MOV   A,[X+5]
    0FD0: 53 03    MOV   [__r7],A
    0FD2: 50 03    MOV   A,0x3
    0FD4: 65 03    ASL   [__r7]
    0FD6: 6B 04    RLC   [__r6]
    0FD8: 6B 05    RLC   [__r5]
    0FDA: 6B 06    RLC   [__r4]
    0FDC: 78       DEC   A
    0FDD: BF F6    JNZ   0x0FD4
    0FDF: 51 03    MOV   A,[__r7]
    0FE1: 02 07    ADD   A,[__r3]
    0FE3: 54 05    MOV   [X+5],A
    0FE5: 51 04    MOV   A,[__r6]
    0FE7: 0A 08    ADC   A,[__r2]
    0FE9: 54 04    MOV   [X+4],A
    0FEB: 51 05    MOV   A,[__r5]
    0FED: 0A 09    ADC   A,[__r1]
    0FEF: 54 03    MOV   [X+3],A
    0FF1: 51 06    MOV   A,[__r4]
    0FF3: 0A 0A    ADC   A,[__r0]
    0FF5: 54 02    MOV   [X+2],A
    0FF7: 52 01    MOV   A,[X+1]
    0FF9: 53 09    MOV   [__r1],A
    0FFB: 52 00    MOV   A,[X+0]
    0FFD: 53 0A    MOV   [__r0],A
    0FFF: 51 09    MOV   A,[__r1]
    1001: 01 01    ADD   A,0x1
    1003: 54 01    MOV   [X+1],A
    1005: 51 0A    MOV   A,[__r0]
    1007: 09 00    ADC   A,0x0
    1009: 54 00    MOV   [X+0],A
    100B: 52 02    MOV   A,[X+2]
    100D: 53 06    MOV   [__r4],A
    100F: 52 03    MOV   A,[X+3]
    1011: 53 05    MOV   [__r5],A
    1013: 52 04    MOV   A,[X+4]
    1015: 53 04    MOV   [__r6],A
    1017: 52 05    MOV   A,[X+5]
    1019: 53 03    MOV   [__r7],A
    101B: 50 18    MOV   A,0x18
    101D: 68 06    ASR   [__r4]
    101F: 6E 05    RRC   [__r5]
    1021: 6E 04    RRC   [__r6]
    1023: 6E 03    RRC   [__r7]
    1025: 78       DEC   A
    1026: BF F6    JNZ   0x101D
    1028: 06 03 30 ADD   [__r7],0x30
    102B: 0E 04 00 ADC   [__r6],0x0
    102E: 0E 05 00 ADC   [__r5],0x0
    1031: 0E 06 00 ADC   [__r4],0x0
    1034: 51 03    MOV   A,[__r7]
    1036: 3F 09    MVI   [__r1],A
    1038: 27 02 00 AND   [X+2],0x0
    103B: 77 14    INC   [X+20]
    103D: 52 14    MOV   A,[X+20]
    103F: 3B 15    CMP   A,[X+21]
    1041: CF 69    JC    0x0FAB
    1043: 52 01    MOV   A,[X+1]
    1045: 01 FF    ADD   A,0xFF
    1047: 54 01    MOV   [X+1],A
    1049: 80 07    JMP   0x1051
    104B: 52 01    MOV   A,[X+1]
    104D: 01 FF    ADD   A,0xFF
    104F: 54 01    MOV   [X+1],A
    1051: 52 01    MOV   A,[X+1]
    1053: 53 09    MOV   [__r1],A
    1055: 3E 09    MVI   A,[__r1]
    1057: 39 30    CMP   A,0x30
    1059: B0 0D    JNZ   0x1067
    105B: 52 01    MOV   A,[X+1]
    105D: 01 FF    ADD   A,0xFF
    105F: 53 09    MOV   [__r1],A
    1061: 3E 09    MVI   A,[__r1]
    1063: 39 2E    CMP   A,0x2E
    1065: BF E5    JNZ   0x104B
    1067: 77 01    INC   [X+1]
    1069: 0F 00 00 ADC   [X+0],0x0
    106C: 52 01    MOV   A,[X+1]
    106E: 53 09    MOV   [__r1],A
    1070: 50 00    MOV   A,0x0
    1072: 3F 09    MVI   [__r1],A
    1074: 55 09 1B MOV   [__r1],0x1B
    1077: 55 0A 00 MOV   [__r0],0x0
    107A: 38 EA    ADD   SP,0xEA
    107C: 20       POP   X
    107D: 7F       RET   
