FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 02    MOV   A,0x2              (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 8D LCALL 0x028D             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 00 02 MOV   [__r0],0x2         (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 00 02 CMP   [__r0],0x2         (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 00    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 50    MOV   X,0x50             (0368)     mov  X,<__idata_start
00AC: 55 00 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 00 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 00    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 03 DA LCALL __UserModules_end|__text_start|_main|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0150: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_testled1
                                        (0019) AREA psoc_config(rom, rel)
                                        (0020) LoadConfigTBL_testled1:
                                        (0021) 	M8C_SetBank0
                                        (0022) ;  Global Register values Bank 0
0152: 62 60 28 MOV   REG[0x60],0x28     (0023) 	mov	reg[60h], 28h		; AnalogColumnInputSelect register (AMX_IN)
0155: 62 66 00 MOV   REG[0x66],0x0      (0024) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
0158: 62 63 05 MOV   REG[0x63],0x5      (0025) 	mov	reg[63h], 05h		; AnalogReferenceControl register (ARF_CR)
015B: 62 65 00 MOV   REG[0x65],0x0      (0026) 	mov	reg[65h], 00h		; AnalogSyncControl register (ASY_CR)
015E: 62 E6 00 MOV   REG[0xE6],0x0      (0027) 	mov	reg[e6h], 00h		; DecimatorControl_0 register (DEC_CR0)
0161: 62 E7 00 MOV   REG[0xE7],0x0      (0028) 	mov	reg[e7h], 00h		; DecimatorControl_1 register (DEC_CR1)
0164: 62 D6 00 MOV   REG[0xD6],0x0      (0029) 	mov	reg[d6h], 00h		; I2CConfig register (I2CCFG)
0167: 62 B0 00 MOV   REG[0xB0],0x0      (0030) 	mov	reg[b0h], 00h		; Row_0_InputMux register (RDI0RI)
016A: 62 B1 00 MOV   REG[0xB1],0x0      (0031) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
016D: 62 B2 00 MOV   REG[0xB2],0x0      (0032) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
0170: 62 B3 33 MOV   REG[0xB3],0x33     (0033) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
0173: 62 B4 33 MOV   REG[0xB4],0x33     (0034) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
0176: 62 B5 00 MOV   REG[0xB5],0x0      (0035) 	mov	reg[b5h], 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
0179: 62 B6 00 MOV   REG[0xB6],0x0      (0036) 	mov	reg[b6h], 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
017C: 62 B8 55 MOV   REG[0xB8],0x55     (0037) 	mov	reg[b8h], 55h		; Row_1_InputMux register (RDI1RI)
017F: 62 B9 00 MOV   REG[0xB9],0x0      (0038) 	mov	reg[b9h], 00h		; Row_1_InputSync register (RDI1SYN)
0182: 62 BA 10 MOV   REG[0xBA],0x10     (0039) 	mov	reg[bah], 10h		; Row_1_LogicInputAMux register (RDI1IS)
0185: 62 BB 33 MOV   REG[0xBB],0x33     (0040) 	mov	reg[bbh], 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
0188: 62 BC 33 MOV   REG[0xBC],0x33     (0041) 	mov	reg[bch], 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
018B: 62 BD 00 MOV   REG[0xBD],0x0      (0042) 	mov	reg[bdh], 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
018E: 62 BE 00 MOV   REG[0xBE],0x0      (0043) 	mov	reg[beh], 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
0191: 71 10    OR    F,0x10             
                                        (0044) ;  Instance name LED_1, User Module LED
                                        (0045) ;  Instance name LED_2, User Module LED
                                        (0046) ;  Instance name LED_3, User Module LED
                                        (0047) ;  Instance name LED_4, User Module LED
                                        (0048) ;  Instance name LED_5, User Module LED
                                        (0049) ;  Instance name LED_6, User Module LED
                                        (0050) ;  Instance name LED_7, User Module LED
                                        (0051) ;  Instance name LED_8, User Module LED
                                        (0052) 	M8C_SetBank1
                                        (0053) ;  Global Register values Bank 1
0193: 62 61 00 MOV   REG[0x61],0x0      (0054) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
0196: 62 69 00 MOV   REG[0x69],0x0      (0055) 	mov	reg[69h], 00h		; AnalogClockSelect2 register (CLK_CR2)
0199: 62 60 00 MOV   REG[0x60],0x0      (0056) 	mov	reg[60h], 00h		; AnalogColumnClockSelect register (CLK_CR0)
019C: 62 62 00 MOV   REG[0x62],0x0      (0057) 	mov	reg[62h], 00h		; AnalogIOControl_0 register (ABF_CR0)
019F: 62 67 33 MOV   REG[0x67],0x33     (0058) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
01A2: 62 68 33 MOV   REG[0x68],0x33     (0059) 	mov	reg[68h], 33h		; AnalogLUTControl1 register (ALT_CR1)
01A5: 62 63 00 MOV   REG[0x63],0x0      (0060) 	mov	reg[63h], 00h		; AnalogModulatorControl_0 register (AMD_CR0)
01A8: 62 66 00 MOV   REG[0x66],0x0      (0061) 	mov	reg[66h], 00h		; AnalogModulatorControl_1 register (AMD_CR1)
01AB: 62 D1 00 MOV   REG[0xD1],0x0      (0062) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
01AE: 62 D3 00 MOV   REG[0xD3],0x0      (0063) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
01B1: 62 D0 00 MOV   REG[0xD0],0x0      (0064) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
01B4: 62 D2 00 MOV   REG[0xD2],0x0      (0065) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
01B7: 62 E1 FF MOV   REG[0xE1],0xFF     (0066) 	mov	reg[e1h], ffh		; OscillatorControl_1 register (OSC_CR1)
01BA: 62 E2 00 MOV   REG[0xE2],0x0      (0067) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
01BD: 62 DF FF MOV   REG[0xDF],0xFF     (0068) 	mov	reg[dfh], ffh		; OscillatorControl_3 register (OSC_CR3)
01C0: 62 DE 02 MOV   REG[0xDE],0x2      (0069) 	mov	reg[deh], 02h		; OscillatorControl_4 register (OSC_CR4)
01C3: 62 DD 00 MOV   REG[0xDD],0x0      (0070) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
01C6: 70 EF    AND   F,0xEF             
01C8: 70 EF    AND   F,0xEF             
                                        (0071) ;  Instance name LED_1, User Module LED
                                        (0072) ;  Instance name LED_2, User Module LED
                                        (0073) ;  Instance name LED_3, User Module LED
                                        (0074) ;  Instance name LED_4, User Module LED
                                        (0075) ;  Instance name LED_5, User Module LED
                                        (0076) ;  Instance name LED_6, User Module LED
                                        (0077) ;  Instance name LED_7, User Module LED
                                        (0078) ;  Instance name LED_8, User Module LED
                                        (0079) 	M8C_SetBank0
                                        (0080) ;  Ordered Global Register values
                                        (0081) 	M8C_SetBank0
01CA: 62 00 00 MOV   REG[0x0],0x0       (0082) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01CD: 71 10    OR    F,0x10             
                                        (0083) 	M8C_SetBank1
01CF: 62 00 FF MOV   REG[0x0],0xFF      (0084) 	mov	reg[00h], ffh		; Port_0_DriveMode_0 register (PRT0DM0)
01D2: 62 01 00 MOV   REG[0x1],0x0       (0085) 	mov	reg[01h], 00h		; Port_0_DriveMode_1 register (PRT0DM1)
01D5: 70 EF    AND   F,0xEF             
                                        (0086) 	M8C_SetBank0
01D7: 62 03 00 MOV   REG[0x3],0x0       (0087) 	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
01DA: 62 02 00 MOV   REG[0x2],0x0       (0088) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01DD: 71 10    OR    F,0x10             
                                        (0089) 	M8C_SetBank1
01DF: 62 02 00 MOV   REG[0x2],0x0       (0090) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01E2: 62 03 00 MOV   REG[0x3],0x0       (0091) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01E5: 70 EF    AND   F,0xEF             
                                        (0092) 	M8C_SetBank0
01E7: 62 01 00 MOV   REG[0x1],0x0       (0093) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01EA: 62 04 00 MOV   REG[0x4],0x0       (0094) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01ED: 71 10    OR    F,0x10             
                                        (0095) 	M8C_SetBank1
01EF: 62 04 00 MOV   REG[0x4],0x0       (0096) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
01F2: 62 05 FF MOV   REG[0x5],0xFF      (0097) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
01F5: 70 EF    AND   F,0xEF             
                                        (0098) 	M8C_SetBank0
01F7: 62 07 FF MOV   REG[0x7],0xFF      (0099) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
01FA: 62 06 00 MOV   REG[0x6],0x0       (0100) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
01FD: 71 10    OR    F,0x10             
                                        (0101) 	M8C_SetBank1
01FF: 62 06 00 MOV   REG[0x6],0x0       (0102) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0202: 62 07 00 MOV   REG[0x7],0x0       (0103) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0205: 70 EF    AND   F,0xEF             
                                        (0104) 	M8C_SetBank0
0207: 62 05 00 MOV   REG[0x5],0x0       (0105) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
020A: 62 08 00 MOV   REG[0x8],0x0       (0106) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
020D: 71 10    OR    F,0x10             
                                        (0107) 	M8C_SetBank1
020F: 62 08 00 MOV   REG[0x8],0x0       (0108) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
0212: 62 09 FF MOV   REG[0x9],0xFF      (0109) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
0215: 70 EF    AND   F,0xEF             
                                        (0110) 	M8C_SetBank0
0217: 62 0B FF MOV   REG[0xB],0xFF      (0111) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
021A: 62 0A 00 MOV   REG[0xA],0x0       (0112) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
021D: 71 10    OR    F,0x10             
                                        (0113) 	M8C_SetBank1
021F: 62 0A 00 MOV   REG[0xA],0x0       (0114) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0222: 62 0B 00 MOV   REG[0xB],0x0       (0115) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0225: 70 EF    AND   F,0xEF             
                                        (0116) 	M8C_SetBank0
0227: 62 09 00 MOV   REG[0x9],0x0       (0117) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
022A: 62 0C 00 MOV   REG[0xC],0x0       (0118) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
022D: 71 10    OR    F,0x10             
                                        (0119) 	M8C_SetBank1
022F: 62 0C 00 MOV   REG[0xC],0x0       (0120) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0232: 62 0D FF MOV   REG[0xD],0xFF      (0121) 	mov	reg[0dh], ffh		; Port_3_DriveMode_1 register (PRT3DM1)
0235: 70 EF    AND   F,0xEF             
                                        (0122) 	M8C_SetBank0
0237: 62 0F FF MOV   REG[0xF],0xFF      (0123) 	mov	reg[0fh], ffh		; Port_3_DriveMode_2 register (PRT3DM2)
023A: 62 0E 00 MOV   REG[0xE],0x0       (0124) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
023D: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
023F: 62 0E 00 MOV   REG[0xE],0x0       (0126) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0242: 62 0F 00 MOV   REG[0xF],0x0       (0127) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0245: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
0247: 62 0D 00 MOV   REG[0xD],0x0       (0129) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
024A: 62 10 00 MOV   REG[0x10],0x0      (0130) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
024D: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
024F: 62 10 00 MOV   REG[0x10],0x0      (0132) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0252: 62 11 FF MOV   REG[0x11],0xFF     (0133) 	mov	reg[11h], ffh		; Port_4_DriveMode_1 register (PRT4DM1)
0255: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
0257: 62 13 FF MOV   REG[0x13],0xFF     (0135) 	mov	reg[13h], ffh		; Port_4_DriveMode_2 register (PRT4DM2)
025A: 62 12 00 MOV   REG[0x12],0x0      (0136) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
025D: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
025F: 62 12 00 MOV   REG[0x12],0x0      (0138) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0262: 62 13 00 MOV   REG[0x13],0x0      (0139) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0265: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
0267: 62 11 00 MOV   REG[0x11],0x0      (0141) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
026A: 62 14 00 MOV   REG[0x14],0x0      (0142) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
026D: 71 10    OR    F,0x10             
                                        (0143) 	M8C_SetBank1
026F: 62 14 00 MOV   REG[0x14],0x0      (0144) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0272: 62 15 0F MOV   REG[0x15],0xF      (0145) 	mov	reg[15h], 0fh		; Port_5_DriveMode_1 register (PRT5DM1)
0275: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
0277: 62 17 0F MOV   REG[0x17],0xF      (0147) 	mov	reg[17h], 0fh		; Port_5_DriveMode_2 register (PRT5DM2)
027A: 62 16 00 MOV   REG[0x16],0x0      (0148) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
027D: 71 10    OR    F,0x10             
                                        (0149) 	M8C_SetBank1
027F: 62 16 00 MOV   REG[0x16],0x0      (0150) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0282: 62 17 00 MOV   REG[0x17],0x0      (0151) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0285: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
0287: 62 15 00 MOV   REG[0x15],0x0      (0153) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
028A: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
028C: 7F       RET                      (0155) 	ret
                                        (0156) 
                                        (0157) 
                                        (0158) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_testled1
                                        (0026) export _LoadConfig_testled1
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) 
                                        (0040) ;---------------------------------------------------------------------------
                                        (0041) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0042) ;                  parameters handled by boot code, like CPU speed). This
                                        (0043) ;                  function can be called from user code, but typically it
                                        (0044) ;                  is only called from boot.
                                        (0045) ;
                                        (0046) ;       INPUTS: None.
                                        (0047) ;      RETURNS: Nothing.
                                        (0048) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0049) ;               In the large memory model currently only the page
                                        (0050) ;               pointer registers listed below are modified.  This does
                                        (0051) ;               not guarantee that in future implementations of this
                                        (0052) ;               function other page pointer registers will not be
                                        (0053) ;               modified.
                                        (0054) ;          
                                        (0055) ;               Page Pointer Registers Modified: 
                                        (0056) ;               CUR_PP
                                        (0057) ;
                                        (0058) _LoadConfigInit:
                                        (0059)  LoadConfigInit:
                                        (0060)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0061)     
028D: 55 01 00 MOV   [0x1],0x0          (0062) 	mov		[Port_0_Data_SHADE], 0h
                                        (0063) 
0290: 7C 02 94 LCALL 0x0294             (0064) 	lcall	LoadConfig_testled1
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
0293: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration testled1
                                        (0072) ;
                                        (0073) ;    Load configuration registers for testled1.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_testled1:
                                        (0090)  LoadConfig_testled1:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
0294: 7C 01 50 LCALL 0x0150             (0092)     lcall   LoadConfigTBL_testled1            ; Call load config table routine
0297: 70 EF    AND   F,0xEF             
                                        (0093) 
                                        (0094) 
                                        (0095)     M8C_SetBank0                    ; Force return to bank 0
                                        (0096)     RAM_EPILOGUE RAM_USE_CLASS_4
0299: 7F       RET                      (0097)     ret
                                        (0098) 
                                        (0099) 
                                        (0100) 
                                        (0101) AREA InterruptRAM(ram, rel)
                                        (0102) 
                                        (0103) NO_SHADOW:
                                        (0104) _NO_SHADOW:
                                        (0105) ; write only register shadows
                                        (0106) _Port_0_Data_SHADE:
                                        (0107) Port_0_Data_SHADE:	BLK	1
                                        (0108) 
FILE: lib\led_8.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_8.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_8.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_8_Start
                                        (0027) export  LED_8_Start
                                        (0028) 
                                        (0029) export _LED_8_Stop
                                        (0030) export  LED_8_Stop
                                        (0031) 
                                        (0032) export _LED_8_On
                                        (0033) export  LED_8_On
                                        (0034) 
                                        (0035) export _LED_8_Off
                                        (0036) export  LED_8_Off
                                        (0037) 
                                        (0038) export _LED_8_Switch
                                        (0039) export  LED_8_Switch
                                        (0040) 
                                        (0041) export _LED_8_Invert
                                        (0042) export  LED_8_Invert
                                        (0043) 
                                        (0044) export _LED_8_GetState
                                        (0045) export  LED_8_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_8_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_8_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_8_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_8_On:
                                        (0079)  LED_8_On:
029A: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
029C: 80 03    JMP   _LED_8_Switch      (0081)    jmp  LED_8_Switch 
                                        (0082) 
                                        (0083) _LED_8_Start:
                                        (0084)  LED_8_Start:
                                        (0085) _LED_8_Stop:
                                        (0086)  LED_8_Stop:
                                        (0087) _LED_8_Off:
                                        (0088)  LED_8_Off:
029E: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_8_Switch:
                                        (0092)  LED_8_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
02A0: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
02A2: A0 06    JZ    0x02A9             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
02A4: 2E 01 80 OR    [0x1],0x80         (0102)    or   [Port_0_Data_SHADE],LED_8_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_8_PinMask
                                        (0105) ENDIF
02A7: 80 04    JMP   0x02AC             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
02A9: 26 01 7F AND   [0x1],0x7F         (0110)    and  [Port_0_Data_SHADE],~LED_8_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_8_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
02AC: 51 01    MOV   A,[0x1]            (0116)    mov  A,[Port_0_Data_SHADE]
02AE: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_8_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
02B0: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_8_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_8_Invert:
                                        (0144)  LED_8_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
02B1: 36 01 80 XOR   [0x1],0x80         (0149)    xor  [Port_0_Data_SHADE],LED_8_PinMask
02B4: 51 01    MOV   A,[0x1]            (0150)    mov  A,[Port_0_Data_SHADE]
02B6: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_8_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
02B8: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_8_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_8_GetState:
                                        (0177)  LED_8_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
02B9: 51 01    MOV   A,[0x1]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
02BB: 21 80    AND   A,0x80             (0188)    and   A,LED_8_PinMask               ; Mask off the trash
02BD: A0 03    JZ    0x02C1             (0189)    jz    .End_LED_GS                   ; If zero, we're done
02BF: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
02C1: 7F       RET                      (0195)    ret
FILE: lib\led_7.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_7.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_7.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_7_Start
                                        (0027) export  LED_7_Start
                                        (0028) 
                                        (0029) export _LED_7_Stop
                                        (0030) export  LED_7_Stop
                                        (0031) 
                                        (0032) export _LED_7_On
                                        (0033) export  LED_7_On
                                        (0034) 
                                        (0035) export _LED_7_Off
                                        (0036) export  LED_7_Off
                                        (0037) 
                                        (0038) export _LED_7_Switch
                                        (0039) export  LED_7_Switch
                                        (0040) 
                                        (0041) export _LED_7_Invert
                                        (0042) export  LED_7_Invert
                                        (0043) 
                                        (0044) export _LED_7_GetState
                                        (0045) export  LED_7_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_7_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_7_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_7_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_7_On:
                                        (0079)  LED_7_On:
02C2: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
02C4: 80 03    JMP   _LED_7_Switch      (0081)    jmp  LED_7_Switch 
                                        (0082) 
                                        (0083) _LED_7_Start:
                                        (0084)  LED_7_Start:
                                        (0085) _LED_7_Stop:
                                        (0086)  LED_7_Stop:
                                        (0087) _LED_7_Off:
                                        (0088)  LED_7_Off:
02C6: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_7_Switch:
                                        (0092)  LED_7_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
02C8: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
02CA: A0 06    JZ    0x02D1             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
02CC: 2E 01 40 OR    [0x1],0x40         (0102)    or   [Port_0_Data_SHADE],LED_7_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_7_PinMask
                                        (0105) ENDIF
02CF: 80 04    JMP   0x02D4             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
02D1: 26 01 BF AND   [0x1],0xBF         (0110)    and  [Port_0_Data_SHADE],~LED_7_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_7_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
02D4: 51 01    MOV   A,[0x1]            (0116)    mov  A,[Port_0_Data_SHADE]
02D6: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_7_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
02D8: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_7_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_7_Invert:
                                        (0144)  LED_7_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
02D9: 36 01 40 XOR   [0x1],0x40         (0149)    xor  [Port_0_Data_SHADE],LED_7_PinMask
02DC: 51 01    MOV   A,[0x1]            (0150)    mov  A,[Port_0_Data_SHADE]
02DE: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_7_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
02E0: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_7_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_7_GetState:
                                        (0177)  LED_7_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
02E1: 51 01    MOV   A,[0x1]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
02E3: 21 40    AND   A,0x40             (0188)    and   A,LED_7_PinMask               ; Mask off the trash
02E5: A0 03    JZ    0x02E9             (0189)    jz    .End_LED_GS                   ; If zero, we're done
02E7: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
02E9: 7F       RET                      (0195)    ret
FILE: lib\led_6.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_6.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_6.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_6_Start
                                        (0027) export  LED_6_Start
                                        (0028) 
                                        (0029) export _LED_6_Stop
                                        (0030) export  LED_6_Stop
                                        (0031) 
                                        (0032) export _LED_6_On
                                        (0033) export  LED_6_On
                                        (0034) 
                                        (0035) export _LED_6_Off
                                        (0036) export  LED_6_Off
                                        (0037) 
                                        (0038) export _LED_6_Switch
                                        (0039) export  LED_6_Switch
                                        (0040) 
                                        (0041) export _LED_6_Invert
                                        (0042) export  LED_6_Invert
                                        (0043) 
                                        (0044) export _LED_6_GetState
                                        (0045) export  LED_6_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_6_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_6_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_6_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_6_On:
                                        (0079)  LED_6_On:
02EA: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
02EC: 80 03    JMP   _LED_6_Switch      (0081)    jmp  LED_6_Switch 
                                        (0082) 
                                        (0083) _LED_6_Start:
                                        (0084)  LED_6_Start:
                                        (0085) _LED_6_Stop:
                                        (0086)  LED_6_Stop:
                                        (0087) _LED_6_Off:
                                        (0088)  LED_6_Off:
02EE: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_6_Switch:
                                        (0092)  LED_6_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
02F0: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
02F2: A0 06    JZ    0x02F9             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
02F4: 2E 01 20 OR    [0x1],0x20         (0102)    or   [Port_0_Data_SHADE],LED_6_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_6_PinMask
                                        (0105) ENDIF
02F7: 80 04    JMP   0x02FC             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
02F9: 26 01 DF AND   [0x1],0xDF         (0110)    and  [Port_0_Data_SHADE],~LED_6_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_6_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
02FC: 51 01    MOV   A,[0x1]            (0116)    mov  A,[Port_0_Data_SHADE]
02FE: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_6_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0300: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_6_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_6_Invert:
                                        (0144)  LED_6_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
0301: 36 01 20 XOR   [0x1],0x20         (0149)    xor  [Port_0_Data_SHADE],LED_6_PinMask
0304: 51 01    MOV   A,[0x1]            (0150)    mov  A,[Port_0_Data_SHADE]
0306: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_6_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0308: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_6_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_6_GetState:
                                        (0177)  LED_6_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
0309: 51 01    MOV   A,[0x1]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
030B: 21 20    AND   A,0x20             (0188)    and   A,LED_6_PinMask               ; Mask off the trash
030D: A0 03    JZ    0x0311             (0189)    jz    .End_LED_GS                   ; If zero, we're done
030F: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0311: 7F       RET                      (0195)    ret
FILE: lib\led_5.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_5.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_5.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_5_Start
                                        (0027) export  LED_5_Start
                                        (0028) 
                                        (0029) export _LED_5_Stop
                                        (0030) export  LED_5_Stop
                                        (0031) 
                                        (0032) export _LED_5_On
                                        (0033) export  LED_5_On
                                        (0034) 
                                        (0035) export _LED_5_Off
                                        (0036) export  LED_5_Off
                                        (0037) 
                                        (0038) export _LED_5_Switch
                                        (0039) export  LED_5_Switch
                                        (0040) 
                                        (0041) export _LED_5_Invert
                                        (0042) export  LED_5_Invert
                                        (0043) 
                                        (0044) export _LED_5_GetState
                                        (0045) export  LED_5_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_5_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_5_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_5_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_5_On:
                                        (0079)  LED_5_On:
0312: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0314: 80 03    JMP   _LED_5_Switch      (0081)    jmp  LED_5_Switch 
                                        (0082) 
                                        (0083) _LED_5_Start:
                                        (0084)  LED_5_Start:
                                        (0085) _LED_5_Stop:
                                        (0086)  LED_5_Stop:
                                        (0087) _LED_5_Off:
                                        (0088)  LED_5_Off:
0316: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_5_Switch:
                                        (0092)  LED_5_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
0318: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
031A: A0 06    JZ    0x0321             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
031C: 2E 01 10 OR    [0x1],0x10         (0102)    or   [Port_0_Data_SHADE],LED_5_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_5_PinMask
                                        (0105) ENDIF
031F: 80 04    JMP   0x0324             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0321: 26 01 EF AND   [0x1],0xEF         (0110)    and  [Port_0_Data_SHADE],~LED_5_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_5_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0324: 51 01    MOV   A,[0x1]            (0116)    mov  A,[Port_0_Data_SHADE]
0326: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_5_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0328: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_5_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_5_Invert:
                                        (0144)  LED_5_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
0329: 36 01 10 XOR   [0x1],0x10         (0149)    xor  [Port_0_Data_SHADE],LED_5_PinMask
032C: 51 01    MOV   A,[0x1]            (0150)    mov  A,[Port_0_Data_SHADE]
032E: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_5_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0330: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_5_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_5_GetState:
                                        (0177)  LED_5_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
0331: 51 01    MOV   A,[0x1]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0333: 21 10    AND   A,0x10             (0188)    and   A,LED_5_PinMask               ; Mask off the trash
0335: A0 03    JZ    0x0339             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0337: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0339: 7F       RET                      (0195)    ret
FILE: lib\led_4.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_4.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_4.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_4_Start
                                        (0027) export  LED_4_Start
                                        (0028) 
                                        (0029) export _LED_4_Stop
                                        (0030) export  LED_4_Stop
                                        (0031) 
                                        (0032) export _LED_4_On
                                        (0033) export  LED_4_On
                                        (0034) 
                                        (0035) export _LED_4_Off
                                        (0036) export  LED_4_Off
                                        (0037) 
                                        (0038) export _LED_4_Switch
                                        (0039) export  LED_4_Switch
                                        (0040) 
                                        (0041) export _LED_4_Invert
                                        (0042) export  LED_4_Invert
                                        (0043) 
                                        (0044) export _LED_4_GetState
                                        (0045) export  LED_4_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_4_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_4_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_4_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_4_On:
                                        (0079)  LED_4_On:
033A: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
033C: 80 03    JMP   _LED_4_Switch      (0081)    jmp  LED_4_Switch 
                                        (0082) 
                                        (0083) _LED_4_Start:
                                        (0084)  LED_4_Start:
                                        (0085) _LED_4_Stop:
                                        (0086)  LED_4_Stop:
                                        (0087) _LED_4_Off:
                                        (0088)  LED_4_Off:
033E: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_4_Switch:
                                        (0092)  LED_4_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
0340: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0342: A0 06    JZ    0x0349             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0344: 2E 01 08 OR    [0x1],0x8          (0102)    or   [Port_0_Data_SHADE],LED_4_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_4_PinMask
                                        (0105) ENDIF
0347: 80 04    JMP   0x034C             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0349: 26 01 F7 AND   [0x1],0xF7         (0110)    and  [Port_0_Data_SHADE],~LED_4_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_4_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
034C: 51 01    MOV   A,[0x1]            (0116)    mov  A,[Port_0_Data_SHADE]
034E: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_4_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0350: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_4_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_4_Invert:
                                        (0144)  LED_4_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
0351: 36 01 08 XOR   [0x1],0x8          (0149)    xor  [Port_0_Data_SHADE],LED_4_PinMask
0354: 51 01    MOV   A,[0x1]            (0150)    mov  A,[Port_0_Data_SHADE]
0356: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_4_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0358: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_4_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_4_GetState:
                                        (0177)  LED_4_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
0359: 51 01    MOV   A,[0x1]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
035B: 21 08    AND   A,0x8              (0188)    and   A,LED_4_PinMask               ; Mask off the trash
035D: A0 03    JZ    0x0361             (0189)    jz    .End_LED_GS                   ; If zero, we're done
035F: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0361: 7F       RET                      (0195)    ret
FILE: lib\led_3.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_3.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_3_Start
                                        (0027) export  LED_3_Start
                                        (0028) 
                                        (0029) export _LED_3_Stop
                                        (0030) export  LED_3_Stop
                                        (0031) 
                                        (0032) export _LED_3_On
                                        (0033) export  LED_3_On
                                        (0034) 
                                        (0035) export _LED_3_Off
                                        (0036) export  LED_3_Off
                                        (0037) 
                                        (0038) export _LED_3_Switch
                                        (0039) export  LED_3_Switch
                                        (0040) 
                                        (0041) export _LED_3_Invert
                                        (0042) export  LED_3_Invert
                                        (0043) 
                                        (0044) export _LED_3_GetState
                                        (0045) export  LED_3_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_3_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_3_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_3_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_3_On:
                                        (0079)  LED_3_On:
0362: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0364: 80 03    JMP   _LED_3_Switch      (0081)    jmp  LED_3_Switch 
                                        (0082) 
                                        (0083) _LED_3_Start:
                                        (0084)  LED_3_Start:
                                        (0085) _LED_3_Stop:
                                        (0086)  LED_3_Stop:
                                        (0087) _LED_3_Off:
                                        (0088)  LED_3_Off:
0366: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_3_Switch:
                                        (0092)  LED_3_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
0368: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
036A: A0 06    JZ    0x0371             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
036C: 2E 01 04 OR    [0x1],0x4          (0102)    or   [Port_0_Data_SHADE],LED_3_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_3_PinMask
                                        (0105) ENDIF
036F: 80 04    JMP   0x0374             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0371: 26 01 FB AND   [0x1],0xFB         (0110)    and  [Port_0_Data_SHADE],~LED_3_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_3_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0374: 51 01    MOV   A,[0x1]            (0116)    mov  A,[Port_0_Data_SHADE]
0376: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_3_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0378: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_3_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_3_Invert:
                                        (0144)  LED_3_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
0379: 36 01 04 XOR   [0x1],0x4          (0149)    xor  [Port_0_Data_SHADE],LED_3_PinMask
037C: 51 01    MOV   A,[0x1]            (0150)    mov  A,[Port_0_Data_SHADE]
037E: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_3_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0380: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_3_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_3_GetState:
                                        (0177)  LED_3_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
0381: 51 01    MOV   A,[0x1]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0383: 21 04    AND   A,0x4              (0188)    and   A,LED_3_PinMask               ; Mask off the trash
0385: A0 03    JZ    0x0389             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0387: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0389: 7F       RET                      (0195)    ret
FILE: lib\led_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_2.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_2_Start
                                        (0027) export  LED_2_Start
                                        (0028) 
                                        (0029) export _LED_2_Stop
                                        (0030) export  LED_2_Stop
                                        (0031) 
                                        (0032) export _LED_2_On
                                        (0033) export  LED_2_On
                                        (0034) 
                                        (0035) export _LED_2_Off
                                        (0036) export  LED_2_Off
                                        (0037) 
                                        (0038) export _LED_2_Switch
                                        (0039) export  LED_2_Switch
                                        (0040) 
                                        (0041) export _LED_2_Invert
                                        (0042) export  LED_2_Invert
                                        (0043) 
                                        (0044) export _LED_2_GetState
                                        (0045) export  LED_2_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_2_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_2_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_2_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_2_On:
                                        (0079)  LED_2_On:
038A: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
038C: 80 03    JMP   _LED_2_Switch      (0081)    jmp  LED_2_Switch 
                                        (0082) 
                                        (0083) _LED_2_Start:
                                        (0084)  LED_2_Start:
                                        (0085) _LED_2_Stop:
                                        (0086)  LED_2_Stop:
                                        (0087) _LED_2_Off:
                                        (0088)  LED_2_Off:
038E: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_2_Switch:
                                        (0092)  LED_2_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
0390: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0392: A0 06    JZ    0x0399             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0394: 2E 01 02 OR    [0x1],0x2          (0102)    or   [Port_0_Data_SHADE],LED_2_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_2_PinMask
                                        (0105) ENDIF
0397: 80 04    JMP   0x039C             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0399: 26 01 FD AND   [0x1],0xFD         (0110)    and  [Port_0_Data_SHADE],~LED_2_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_2_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
039C: 51 01    MOV   A,[0x1]            (0116)    mov  A,[Port_0_Data_SHADE]
039E: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_2_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
03A0: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_2_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_2_Invert:
                                        (0144)  LED_2_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
03A1: 36 01 02 XOR   [0x1],0x2          (0149)    xor  [Port_0_Data_SHADE],LED_2_PinMask
03A4: 51 01    MOV   A,[0x1]            (0150)    mov  A,[Port_0_Data_SHADE]
03A6: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_2_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
03A8: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_2_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_2_GetState:
                                        (0177)  LED_2_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
03A9: 51 01    MOV   A,[0x1]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
03AB: 21 02    AND   A,0x2              (0188)    and   A,LED_2_PinMask               ; Mask off the trash
03AD: A0 03    JZ    0x03B1             (0189)    jz    .End_LED_GS                   ; If zero, we're done
03AF: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
03B1: 7F       RET                      (0195)    ret
FILE: lib\led_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_1.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_1_Start
                                        (0027) export  LED_1_Start
                                        (0028) 
                                        (0029) export _LED_1_Stop
                                        (0030) export  LED_1_Stop
                                        (0031) 
                                        (0032) export _LED_1_On
                                        (0033) export  LED_1_On
                                        (0034) 
                                        (0035) export _LED_1_Off
                                        (0036) export  LED_1_Off
                                        (0037) 
                                        (0038) export _LED_1_Switch
                                        (0039) export  LED_1_Switch
                                        (0040) 
                                        (0041) export _LED_1_Invert
                                        (0042) export  LED_1_Invert
                                        (0043) 
                                        (0044) export _LED_1_GetState
                                        (0045) export  LED_1_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_1_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_1_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_1_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_1_On:
                                        (0079)  LED_1_On:
03B2: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
03B4: 80 03    JMP   _LED_1_Switch      (0081)    jmp  LED_1_Switch 
                                        (0082) 
                                        (0083) _LED_1_Start:
                                        (0084)  LED_1_Start:
                                        (0085) _LED_1_Stop:
                                        (0086)  LED_1_Stop:
                                        (0087) _LED_1_Off:
                                        (0088)  LED_1_Off:
03B6: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_1_Switch:
                                        (0092)  LED_1_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
03B8: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
03BA: A0 06    JZ    0x03C1             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
03BC: 2E 01 01 OR    [0x1],0x1          (0102)    or   [Port_0_Data_SHADE],LED_1_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_1_PinMask
                                        (0105) ENDIF
03BF: 80 04    JMP   0x03C4             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
03C1: 26 01 FE AND   [0x1],0xFE         (0110)    and  [Port_0_Data_SHADE],~LED_1_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_1_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
03C4: 51 01    MOV   A,[0x1]            (0116)    mov  A,[Port_0_Data_SHADE]
03C6: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_1_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
03C8: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_1_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_1_Invert:
                                        (0144)  LED_1_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
03C9: 36 01 01 XOR   [0x1],0x1          (0149)    xor  [Port_0_Data_SHADE],LED_1_PinMask
03CC: 51 01    MOV   A,[0x1]            (0150)    mov  A,[Port_0_Data_SHADE]
03CE: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_1_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
03D0: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_1_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_1_GetState:
                                        (0177)  LED_1_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
03D1: 51 01    MOV   A,[0x1]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
03D3: 21 01    AND   A,0x1              (0188)    and   A,LED_1_PinMask               ; Mask off the trash
03D5: A0 03    JZ    0x03D9             (0189)    jz    .End_LED_GS                   ; If zero, we're done
03D7: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
03D9: 7F       RET                      (0195)    ret
FILE: C:\Users\revecom\Desktop\PSOC\TestLed1\TestLed1\TestLed1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) 
(0009) void main(void)
(0010) {
__UserModules_end|__text_start|_main|_main:
  i                    --> X+0
    03DA: 10       PUSH  X
    03DB: 4F       MOV   X,SP
    03DC: 38 02    ADD   SP,0x2
(0011) 	int i=0;
    03DE: 56 01 00 MOV   [X+1],0x0
    03E1: 56 00 00 MOV   [X+0],0x0
(0012) 	LED_1_Start(); //initialise led1 , ay modeule nestamlou lewm esmou baed start
    03E4: 10       PUSH  X
    03E5: 7C 03 B6 LCALL _LED_1_Start|LED_1_Off|LED_1_Start|_LED_1_Off|_LED_1_Stop|LED_1_Stop
(0013) 	LED_2_Start();
    03E8: 7C 03 8E LCALL LED_2_Off|_LED_2_Start|_LED_2_Stop|LED_2_Start|LED_2_Stop|_LED_2_Off
(0014) 	LED_3_Start();
    03EB: 7C 03 66 LCALL _LED_3_Off|LED_3_Start|LED_3_Off|_LED_3_Stop|_LED_3_Start|LED_3_Stop
(0015) 	LED_4_Start();
    03EE: 7C 03 3E LCALL _LED_4_Off|LED_4_Start|LED_4_Stop|_LED_4_Stop|_LED_4_Start
(0016) 	LED_5_Start();
    03F1: 7C 03 16 LCALL _LED_5_Off|_LED_5_Start|LED_5_Stop|LED_5_Start|_LED_5_Stop
(0017) 	LED_6_Start();
    03F4: 7C 02 EE LCALL LED_6_Stop|LED_6_Off|LED_6_Start|_LED_6_Start|_LED_6_Stop|_LED_6_Off
(0018) 	LED_7_Start();
    03F7: 7C 02 C6 LCALL _LED_7_Off|LED_7_Stop|_LED_7_Stop|LED_7_Off|LED_7_Start|_LED_7_Start
(0019) 	LED_8_Start();
    03FA: 7C 02 9E LCALL _LED_8_Off|_LED_8_Start|LED_8_Stop|LED_8_Start|LED_8_Off|_LED_8_Stop
    03FD: 20       POP   X
    03FE: 81 14    JMP   0x0513
(0020) 	while (1){
(0021) 	LED_1_Switch(1);  //aluumer led1  , kent 0 twali 1 w tant que low high donc 1 tcha3el
    0400: 10       PUSH  X
    0401: 50 01    MOV   A,0x1
    0403: 7C 03 B8 LCALL _LED_1_Switch
    0406: 20       POP   X
(0022) 	for (i=0;i<5000;i++){
    0407: 56 01 00 MOV   [X+1],0x0
    040A: 56 00 00 MOV   [X+0],0x0
(0023) 			;
(0024) 		                }
    040D: 77 01    INC   [X+1]
    040F: 0F 00 00 ADC   [X+0],0x0
    0412: 52 01    MOV   A,[X+1]
    0414: 11 88    SUB   A,0x88
    0416: 52 00    MOV   A,[X+0]
    0418: 31 80    XOR   A,0x80
    041A: 19 93    SBB   A,0x93
    041C: CF F0    JC    0x040D
(0025) 	LED_1_Switch(0);
    041E: 10       PUSH  X
    041F: 50 00    MOV   A,0x0
    0421: 7C 03 B8 LCALL _LED_1_Switch
(0026) 	LED_2_Switch(1);
    0424: 50 01    MOV   A,0x1
    0426: 7C 03 90 LCALL _LED_2_Switch
    0429: 20       POP   X
(0027) 	for (i=0;i<5000;i++){
    042A: 56 01 00 MOV   [X+1],0x0
    042D: 56 00 00 MOV   [X+0],0x0
(0028) 			;
(0029) 		                    }
    0430: 77 01    INC   [X+1]
    0432: 0F 00 00 ADC   [X+0],0x0
    0435: 52 01    MOV   A,[X+1]
    0437: 11 88    SUB   A,0x88
    0439: 52 00    MOV   A,[X+0]
    043B: 31 80    XOR   A,0x80
    043D: 19 93    SBB   A,0x93
    043F: CF F0    JC    0x0430
(0030) 	LED_2_Switch(0);
    0441: 10       PUSH  X
    0442: 50 00    MOV   A,0x0
    0444: 7C 03 90 LCALL _LED_2_Switch
(0031) 	LED_3_Switch(1);
    0447: 50 01    MOV   A,0x1
    0449: 7C 03 68 LCALL _LED_3_Switch
    044C: 20       POP   X
(0032) 	for (i=0;i<5000;i++){
    044D: 56 01 00 MOV   [X+1],0x0
    0450: 56 00 00 MOV   [X+0],0x0
(0033) 			;
(0034) 		                    }
    0453: 77 01    INC   [X+1]
    0455: 0F 00 00 ADC   [X+0],0x0
    0458: 52 01    MOV   A,[X+1]
    045A: 11 88    SUB   A,0x88
    045C: 52 00    MOV   A,[X+0]
    045E: 31 80    XOR   A,0x80
    0460: 19 93    SBB   A,0x93
    0462: CF F0    JC    0x0453
(0035) 	LED_3_Switch(0);
    0464: 10       PUSH  X
    0465: 50 00    MOV   A,0x0
    0467: 7C 03 68 LCALL _LED_3_Switch
(0036) 	LED_4_Switch(1);
    046A: 50 01    MOV   A,0x1
    046C: 7C 03 40 LCALL _LED_4_Switch
    046F: 20       POP   X
(0037) 	for (i=0;i<5000;i++){
    0470: 56 01 00 MOV   [X+1],0x0
    0473: 56 00 00 MOV   [X+0],0x0
(0038) 			;
(0039) 		                    }
    0476: 77 01    INC   [X+1]
    0478: 0F 00 00 ADC   [X+0],0x0
    047B: 52 01    MOV   A,[X+1]
    047D: 11 88    SUB   A,0x88
    047F: 52 00    MOV   A,[X+0]
    0481: 31 80    XOR   A,0x80
    0483: 19 93    SBB   A,0x93
    0485: CF F0    JC    0x0476
(0040) 	LED_4_Switch(0);
    0487: 10       PUSH  X
    0488: 50 00    MOV   A,0x0
    048A: 7C 03 40 LCALL _LED_4_Switch
(0041) 	LED_5_Switch(1);
    048D: 50 01    MOV   A,0x1
    048F: 7C 03 18 LCALL _LED_5_Switch
    0492: 20       POP   X
(0042) 	for (i=0;i<5000;i++){
    0493: 56 01 00 MOV   [X+1],0x0
    0496: 56 00 00 MOV   [X+0],0x0
(0043) 			;
(0044) 		                    }
    0499: 77 01    INC   [X+1]
    049B: 0F 00 00 ADC   [X+0],0x0
    049E: 52 01    MOV   A,[X+1]
    04A0: 11 88    SUB   A,0x88
    04A2: 52 00    MOV   A,[X+0]
    04A4: 31 80    XOR   A,0x80
    04A6: 19 93    SBB   A,0x93
    04A8: CF F0    JC    0x0499
(0045) 	LED_5_Switch(0);
    04AA: 10       PUSH  X
    04AB: 50 00    MOV   A,0x0
    04AD: 7C 03 18 LCALL _LED_5_Switch
(0046) 	LED_6_Switch(1);
    04B0: 50 01    MOV   A,0x1
    04B2: 7C 02 F0 LCALL _LED_6_Switch
    04B5: 20       POP   X
(0047) 	for (i=0;i<5000;i++){
    04B6: 56 01 00 MOV   [X+1],0x0
    04B9: 56 00 00 MOV   [X+0],0x0
(0048) 			;
(0049) 		                    }
    04BC: 77 01    INC   [X+1]
    04BE: 0F 00 00 ADC   [X+0],0x0
    04C1: 52 01    MOV   A,[X+1]
    04C3: 11 88    SUB   A,0x88
    04C5: 52 00    MOV   A,[X+0]
    04C7: 31 80    XOR   A,0x80
    04C9: 19 93    SBB   A,0x93
    04CB: CF F0    JC    0x04BC
(0050) 	LED_6_Switch(0);
    04CD: 10       PUSH  X
    04CE: 50 00    MOV   A,0x0
    04D0: 7C 02 F0 LCALL _LED_6_Switch
(0051) 	LED_7_Switch(1);
    04D3: 50 01    MOV   A,0x1
    04D5: 7C 02 C8 LCALL _LED_7_Switch
    04D8: 20       POP   X
(0052) 	for (i=0;i<5000;i++){
    04D9: 56 01 00 MOV   [X+1],0x0
    04DC: 56 00 00 MOV   [X+0],0x0
(0053) 			;
(0054) 		                    }
    04DF: 77 01    INC   [X+1]
    04E1: 0F 00 00 ADC   [X+0],0x0
    04E4: 52 01    MOV   A,[X+1]
    04E6: 11 88    SUB   A,0x88
    04E8: 52 00    MOV   A,[X+0]
    04EA: 31 80    XOR   A,0x80
    04EC: 19 93    SBB   A,0x93
    04EE: CF F0    JC    0x04DF
(0055) 	LED_7_Switch(0);
    04F0: 10       PUSH  X
    04F1: 50 00    MOV   A,0x0
    04F3: 7C 02 C8 LCALL _LED_7_Switch
(0056) 	LED_8_Switch(1);
    04F6: 50 01    MOV   A,0x1
    04F8: 7C 02 A0 LCALL _LED_8_Switch
    04FB: 20       POP   X
(0057) 	for (i=0;i<5000;i++){
    04FC: 56 01 00 MOV   [X+1],0x0
    04FF: 56 00 00 MOV   [X+0],0x0
(0058) 			;
(0059) 		                    }
    0502: 77 01    INC   [X+1]
    0504: 0F 00 00 ADC   [X+0],0x0
    0507: 52 01    MOV   A,[X+1]
    0509: 11 88    SUB   A,0x88
    050B: 52 00    MOV   A,[X+0]
    050D: 31 80    XOR   A,0x80
    050F: 19 93    SBB   A,0x93
    0511: CF F0    JC    0x0502
(0060) 
(0061) 	//tous les led sont connectéés au port0 (8 led)
(0062) }
    0513: 8E EC    JMP   0x0400
(0063) }
    0515: 38 FE    ADD   SP,0xFE
    0517: 20       POP   X
    0518: 8F FF    JMP   0x0518
