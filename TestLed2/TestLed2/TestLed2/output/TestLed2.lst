FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 05    MOV   A,0x5              (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 66 LCALL 0x0266             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 03 05 MOV   [__r0],0x5         (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 03 05 CMP   [__r0],0x5         (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 03    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 9E    MOV   X,0x9E             (0368)     mov  X,<__idata_start
00AC: 55 03 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 03 03 CMP   [__r0],0x3         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 03    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 02 EF LCALL __UserModules_end|__text_start|_main|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
01A1: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_testled2_Bank1
                                        (0019) export LoadConfigTBL_testled2_Bank0
                                        (0020) export LoadConfigTBL_testled2_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_testled2_Bank0:
                                        (0023) ;  Instance name LED_1, User Module LED
                                        (0024) ;  Global Register values Bank 0
                                        (0025) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0026) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0027) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0028) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0029) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0030) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0031) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0032) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0033) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0034) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0035) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0036) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0037) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0038) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0039) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0040) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0041) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0042) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0043) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0044) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0045) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0046) 	db		ffh
                                        (0047) LoadConfigTBL_testled2_Bank1:
                                        (0048) ;  Instance name LED_1, User Module LED
                                        (0049) ;  Global Register values Bank 1
                                        (0050) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0051) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0052) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0053) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0054) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0055) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0056) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0057) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0058) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0059) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0060) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0061) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0062) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0063) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0064) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0065) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0066) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0067) 	db		ffh
                                        (0068) AREA psoc_config(rom, rel)
                                        (0069) LoadConfigTBL_testled2_Ordered:
                                        (0070) ;  Ordered Global Register values
                                        (0071) 	M8C_SetBank0
01A3: 62 00 00 MOV   REG[0x0],0x0       (0072) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01A6: 71 10    OR    F,0x10             
                                        (0073) 	M8C_SetBank1
01A8: 62 00 01 MOV   REG[0x0],0x1       (0074) 	mov	reg[00h], 01h		; Port_0_DriveMode_0 register (PRT0DM0)
01AB: 62 01 FE MOV   REG[0x1],0xFE      (0075) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
01AE: 70 EF    AND   F,0xEF             
                                        (0076) 	M8C_SetBank0
01B0: 62 03 FE MOV   REG[0x3],0xFE      (0077) 	mov	reg[03h], feh		; Port_0_DriveMode_2 register (PRT0DM2)
01B3: 62 02 00 MOV   REG[0x2],0x0       (0078) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01B6: 71 10    OR    F,0x10             
                                        (0079) 	M8C_SetBank1
01B8: 62 02 00 MOV   REG[0x2],0x0       (0080) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01BB: 62 03 00 MOV   REG[0x3],0x0       (0081) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01BE: 70 EF    AND   F,0xEF             
                                        (0082) 	M8C_SetBank0
01C0: 62 01 00 MOV   REG[0x1],0x0       (0083) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01C3: 62 04 00 MOV   REG[0x4],0x0       (0084) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01C6: 71 10    OR    F,0x10             
                                        (0085) 	M8C_SetBank1
01C8: 62 04 00 MOV   REG[0x4],0x0       (0086) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
01CB: 62 05 FF MOV   REG[0x5],0xFF      (0087) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
01CE: 70 EF    AND   F,0xEF             
                                        (0088) 	M8C_SetBank0
01D0: 62 07 FF MOV   REG[0x7],0xFF      (0089) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
01D3: 62 06 00 MOV   REG[0x6],0x0       (0090) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
01D6: 71 10    OR    F,0x10             
                                        (0091) 	M8C_SetBank1
01D8: 62 06 00 MOV   REG[0x6],0x0       (0092) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01DB: 62 07 00 MOV   REG[0x7],0x0       (0093) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01DE: 70 EF    AND   F,0xEF             
                                        (0094) 	M8C_SetBank0
01E0: 62 05 00 MOV   REG[0x5],0x0       (0095) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
01E3: 62 08 00 MOV   REG[0x8],0x0       (0096) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
01E6: 71 10    OR    F,0x10             
                                        (0097) 	M8C_SetBank1
01E8: 62 08 00 MOV   REG[0x8],0x0       (0098) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
01EB: 62 09 FF MOV   REG[0x9],0xFF      (0099) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
01EE: 70 EF    AND   F,0xEF             
                                        (0100) 	M8C_SetBank0
01F0: 62 0B FF MOV   REG[0xB],0xFF      (0101) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
01F3: 62 0A 00 MOV   REG[0xA],0x0       (0102) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
01F6: 71 10    OR    F,0x10             
                                        (0103) 	M8C_SetBank1
01F8: 62 0A 00 MOV   REG[0xA],0x0       (0104) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
01FB: 62 0B 00 MOV   REG[0xB],0x0       (0105) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
01FE: 70 EF    AND   F,0xEF             
                                        (0106) 	M8C_SetBank0
0200: 62 09 00 MOV   REG[0x9],0x0       (0107) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0203: 62 0C 00 MOV   REG[0xC],0x0       (0108) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0206: 71 10    OR    F,0x10             
                                        (0109) 	M8C_SetBank1
0208: 62 0C 00 MOV   REG[0xC],0x0       (0110) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
020B: 62 0D FF MOV   REG[0xD],0xFF      (0111) 	mov	reg[0dh], ffh		; Port_3_DriveMode_1 register (PRT3DM1)
020E: 70 EF    AND   F,0xEF             
                                        (0112) 	M8C_SetBank0
0210: 62 0F FF MOV   REG[0xF],0xFF      (0113) 	mov	reg[0fh], ffh		; Port_3_DriveMode_2 register (PRT3DM2)
0213: 62 0E 00 MOV   REG[0xE],0x0       (0114) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0216: 71 10    OR    F,0x10             
                                        (0115) 	M8C_SetBank1
0218: 62 0E 00 MOV   REG[0xE],0x0       (0116) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
021B: 62 0F 00 MOV   REG[0xF],0x0       (0117) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
021E: 70 EF    AND   F,0xEF             
                                        (0118) 	M8C_SetBank0
0220: 62 0D 00 MOV   REG[0xD],0x0       (0119) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0223: 62 10 00 MOV   REG[0x10],0x0      (0120) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0226: 71 10    OR    F,0x10             
                                        (0121) 	M8C_SetBank1
0228: 62 10 00 MOV   REG[0x10],0x0      (0122) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
022B: 62 11 00 MOV   REG[0x11],0x0      (0123) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
022E: 70 EF    AND   F,0xEF             
                                        (0124) 	M8C_SetBank0
0230: 62 13 00 MOV   REG[0x13],0x0      (0125) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0233: 62 12 00 MOV   REG[0x12],0x0      (0126) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0236: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
0238: 62 12 00 MOV   REG[0x12],0x0      (0128) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
023B: 62 13 00 MOV   REG[0x13],0x0      (0129) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
023E: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
0240: 62 11 00 MOV   REG[0x11],0x0      (0131) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0243: 62 14 00 MOV   REG[0x14],0x0      (0132) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0246: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
0248: 62 14 00 MOV   REG[0x14],0x0      (0134) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
024B: 62 15 0F MOV   REG[0x15],0xF      (0135) 	mov	reg[15h], 0fh		; Port_5_DriveMode_1 register (PRT5DM1)
024E: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
0250: 62 17 0F MOV   REG[0x17],0xF      (0137) 	mov	reg[17h], 0fh		; Port_5_DriveMode_2 register (PRT5DM2)
0253: 62 16 00 MOV   REG[0x16],0x0      (0138) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0256: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
0258: 62 16 00 MOV   REG[0x16],0x0      (0140) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
025B: 62 17 00 MOV   REG[0x17],0x0      (0141) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
025E: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
0260: 62 15 00 MOV   REG[0x15],0x0      (0143) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0263: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
0265: 7F       RET                      (0145) 	ret
                                        (0146) 
                                        (0147) 
                                        (0148) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_testled2
                                        (0026) export _LoadConfig_testled2
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     
0266: 55 04 00 MOV   [0x4],0x0          (0061) 	mov		[Port_0_Data_SHADE], 0h
                                        (0062) 
0269: 7C 02 70 LCALL 0x0270             (0063) 	lcall	LoadConfig_testled2
026C: 7C 01 A1 LCALL 0x01A1             (0064) 	lcall	LoadConfigTBL_testled2_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
026F: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration testled2
                                        (0072) ;
                                        (0073) ;    Load configuration registers for testled2.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_testled2:
                                        (0090)  LoadConfig_testled2:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
0270: 10       PUSH  X                  (0093) 	push	x
0271: 70 EF    AND   F,0xEF             
                                        (0094)     M8C_SetBank0                    ; Force bank 0
0273: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
0275: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
0276: 50 01    MOV   A,0x1              (0098)     mov     A, >LoadConfigTBL_testled2_Bank0
0278: 57 50    MOV   X,0x50             (0099)     mov     X, <LoadConfigTBL_testled2_Bank0
027A: 7C 02 8B LCALL 0x028B             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
027D: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
027F: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
0280: 50 01    MOV   A,0x1              (0105)     mov     A, >LoadConfigTBL_testled2_Bank1
0282: 57 7B    MOV   X,0x7B             (0106)     mov     X, <LoadConfigTBL_testled2_Bank1
0284: 7C 02 8B LCALL 0x028B             (0107)     lcall   LoadConfig              ; Load the bank 1 values
0287: 70 EF    AND   F,0xEF             
                                        (0108) 
                                        (0109)     M8C_SetBank0                    ; Force return to bank 0
0289: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
028A: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
028B: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
028D: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
028E: 08       PUSH  A                  (0137)     push    A
028F: 4F       MOV   X,SP               (0138)     mov     X, SP
0290: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
0293: D0 04    JNC   0x0298             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0295: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
0298: 18       POP   A                  (0143)     pop     A
0299: 20       POP   X                  (0144)     pop     X
029A: 70 EF    AND   F,0xEF             
029C: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0145) 
                                        (0146) LoadConfigLp:
                                        (0147)     M8C_SetBank0                    ; Switch to bank 0
                                        (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
029F: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
02A0: 08       PUSH  A                  (0150)     push    A
02A1: 28       ROMX                     (0151)     romx                            ; Load register address from table
02A2: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
02A4: A0 1F    JZ    0x02C4             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
02A6: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
02A7: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
02AA: A0 03    JZ    0x02AE             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02AC: 71 10    OR    F,0x10             
                                        (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
02AE: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
02B0: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
02B1: 20       POP   X                  (0161)     pop     X
02B2: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
02B3: 09 00    ADC   A,0x0              (0163)     adc     A, 0
02B5: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
02B6: 08       PUSH  A                  (0165)     push    A
02B7: 28       ROMX                     (0166)     romx                            ; load config data from the table
02B8: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
02B9: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
02BB: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
02BD: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
02BE: 20       POP   X                  (0171)     pop     X
02BF: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
02C0: 09 00    ADC   A,0x0              (0173)     adc     A, 0
02C2: 8F D7    JMP   0x029A             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
02C4: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
                                        (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
02C6: 7F       RET                      (0178)     ret
                                        (0179) 
                                        (0180) AREA InterruptRAM(ram, rel)
                                        (0181) 
                                        (0182) NO_SHADOW:
                                        (0183) _NO_SHADOW:
                                        (0184) ; write only register shadows
                                        (0185) _Port_0_Data_SHADE:
                                        (0186) Port_0_Data_SHADE:	BLK	1
                                        (0187) 
FILE: lib\led_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_1.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_1_Start
                                        (0027) export  LED_1_Start
                                        (0028) 
                                        (0029) export _LED_1_Stop
                                        (0030) export  LED_1_Stop
                                        (0031) 
                                        (0032) export _LED_1_On
                                        (0033) export  LED_1_On
                                        (0034) 
                                        (0035) export _LED_1_Off
                                        (0036) export  LED_1_Off
                                        (0037) 
                                        (0038) export _LED_1_Switch
                                        (0039) export  LED_1_Switch
                                        (0040) 
                                        (0041) export _LED_1_Invert
                                        (0042) export  LED_1_Invert
                                        (0043) 
                                        (0044) export _LED_1_GetState
                                        (0045) export  LED_1_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_1_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_1_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_1_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_1_On:
                                        (0079)  LED_1_On:
02C7: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
02C9: 80 03    JMP   _LED_1_Switch      (0081)    jmp  LED_1_Switch 
                                        (0082) 
                                        (0083) _LED_1_Start:
                                        (0084)  LED_1_Start:
                                        (0085) _LED_1_Stop:
                                        (0086)  LED_1_Stop:
                                        (0087) _LED_1_Off:
                                        (0088)  LED_1_Off:
02CB: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_1_Switch:
                                        (0092)  LED_1_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
02CD: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
02CF: A0 06    JZ    0x02D6             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
02D1: 2E 04 01 OR    [0x4],0x1          (0102)    or   [Port_0_Data_SHADE],LED_1_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~LED_1_PinMask
                                        (0105) ENDIF
02D4: 80 04    JMP   0x02D9             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
02D6: 26 04 FE AND   [0x4],0xFE         (0110)    and  [Port_0_Data_SHADE],~LED_1_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],LED_1_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
02D9: 51 04    MOV   A,[0x4]            (0116)    mov  A,[Port_0_Data_SHADE]
02DB: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[LED_1_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
02DD: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_1_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_1_Invert:
                                        (0144)  LED_1_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
02DE: 36 04 01 XOR   [0x4],0x1          (0149)    xor  [Port_0_Data_SHADE],LED_1_PinMask
02E1: 51 04    MOV   A,[0x4]            (0150)    mov  A,[Port_0_Data_SHADE]
02E3: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[LED_1_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
02E5: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_1_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_1_GetState:
                                        (0177)  LED_1_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
02E6: 51 04    MOV   A,[0x4]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
02E8: 21 01    AND   A,0x1              (0188)    and   A,LED_1_PinMask               ; Mask off the trash
02EA: A0 03    JZ    0x02EE             (0189)    jz    .End_LED_GS                   ; If zero, we're done
02EC: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
02EE: 7F       RET                      (0195)    ret
FILE: C:\Users\revecom\Desktop\PSOC\TestLed2\TestLed2\TestLed2\main.c
(0001) /*
(0002) //----------------------------------------------------------------------------
(0003) // C main line
(0004) //----------------------------------------------------------------------------
(0005) 
(0006) #include <m8c.h>        // part specific constants and macros
(0007) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0008) char code=0;
(0009) char cols=0;
(0010) char rows=0;
(0011) //|--18--|--14--|--12--|--11--|
(0012) 
(0013) //|--28--|--24--|--22--|--21--|
(0014) 
(0015) //|--48--|--44--|--42--|--41--|
(0016) 
(0017) //|--88--|--84--|--82--|--81--|
(0018) void main(){
(0019) LED_1_Start();
(0020) //initialise port4 a 0//
(0021) PRT4DR=0x0f;
(0022) rows=PRT4DR;
(0023) PRT4DR=0xf0;
(0024) cols=PRT4DR;
(0025) code=rows & cols ;
(0026) while (1){
(0027) switch (code) {
(0028) case 0x18 : LED_1_Switch(1);	
(0029) break;
(0030) default : LED_1_Switch(0);
(0031) }
(0032) rows=PRT4DR;
(0033) cols=PRT4DR;
(0034) code=rows & cols ;	
(0035) }	
(0036) }
(0037) */
(0038) //----------------------------------------------------------------------------
(0039) // C main line
(0040) //----------------------------------------------------------------------------
(0041) 
(0042) #include <m8c.h>        // part specific constants and macros
(0043) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0044) char code=0;
(0045) char cols=0;
(0046) char rows=0;
(0047) 
(0048) void main(){
(0049) LED_1_Start();
__UserModules_end|__text_start|_main|_main:
    02EF: 10       PUSH  X
    02F0: 7C 02 CB LCALL LED_1_Stop|_LED_1_Off|_LED_1_Stop|LED_1_Start|_LED_1_Start|LED_1_Off
    02F3: 20       POP   X
(0050) //initialise port4 a 0//
(0051) PRT4DR=0x0f;
    02F4: 62 10 0F MOV   REG[0x10],0xF
(0052) rows=PRT4DR;
    02F7: 5D 10    MOV   A,REG[0x10]
    02F9: 53 02    MOV   [rows],A
(0053) PRT4DR=0xf0;
    02FB: 62 10 F0 MOV   REG[0x10],0xF0
(0054) cols=PRT4DR;
    02FE: 5D 10    MOV   A,REG[0x10]
    0300: 53 01    MOV   [cols],A
(0055) code=rows & cols ;
    0302: 51 02    MOV   A,[rows]
    0304: 22 01    AND   A,[cols]
    0306: 53 00    MOV   [code],A
    0308: 80 27    JMP   0x0330
(0056) while (1){
(0057) // b1 tcha3l w b2 tfai
(0058) if (code == 0x18){
    030A: 3C 00 18 CMP   [code],0x18
    030D: B0 08    JNZ   0x0316
(0059) 	LED_1_Switch(1);	
    030F: 10       PUSH  X
    0310: 50 01    MOV   A,0x1
    0312: 7C 02 CD LCALL _LED_1_Switch
    0315: 20       POP   X
(0060) }
(0061) if (code == 0x14){
    0316: 3C 00 14 CMP   [code],0x14
    0319: B0 08    JNZ   0x0322
(0062) 	LED_1_Switch(0);
    031B: 10       PUSH  X
    031C: 50 00    MOV   A,0x0
    031E: 7C 02 CD LCALL _LED_1_Switch
    0321: 20       POP   X
(0063) }
(0064) rows=PRT4DR;
    0322: 5D 10    MOV   A,REG[0x10]
    0324: 53 02    MOV   [rows],A
(0065) cols=PRT4DR;
    0326: 5D 10    MOV   A,REG[0x10]
    0328: 53 01    MOV   [cols],A
(0066) code=rows & cols ;	
    032A: 51 02    MOV   A,[rows]
    032C: 22 01    AND   A,[cols]
    032E: 53 00    MOV   [code],A
(0067) }	
    0330: 8F D9    JMP   0x030A
(0068) }
(0069) 
(0070) 
(0071) 
    0332: 8F FF    JMP   0x0332
